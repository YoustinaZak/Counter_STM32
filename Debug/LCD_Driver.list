
LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000220c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002390  08002390  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08002390  08002390  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002390  08002390  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08002398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000009c  08002434  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08002434  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003ad3  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001414  00000000  00000000  00023bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000508  00000000  00000000  00024ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000391  00000000  00000000  000254f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017293  00000000  00000000  00025889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000070f3  00000000  00000000  0003cb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080022  00000000  00000000  00043c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016ac  00000000  00000000  000c3c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000c52e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002300 	.word	0x08002300

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08002300 	.word	0x08002300

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd35 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8cb 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f905 	bl	8000368 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Alcd_Init(& lcd1, 2, 0);
 800015e:	2200      	movs	r2, #0
 8000160:	2102      	movs	r1, #2
 8000162:	485d      	ldr	r0, [pc, #372]	; (80002d8 <main+0x18c>)
 8000164:	f000 fafe 	bl	8000764 <Alcd_Init>


  Alcd_PutAt_n(&lcd1, 1, 0, "Youstina", 8);
 8000168:	2308      	movs	r3, #8
 800016a:	9300      	str	r3, [sp, #0]
 800016c:	4b5b      	ldr	r3, [pc, #364]	; (80002dc <main+0x190>)
 800016e:	2200      	movs	r2, #0
 8000170:	2101      	movs	r1, #1
 8000172:	4859      	ldr	r0, [pc, #356]	; (80002d8 <main+0x18c>)
 8000174:	f000 fbb1 	bl	80008da <Alcd_PutAt_n>
  HAL_Delay(3000);
 8000178:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800017c:	f000 fd82 	bl	8000c84 <HAL_Delay>

  Alcd_Clear(&lcd1);
 8000180:	4855      	ldr	r0, [pc, #340]	; (80002d8 <main+0x18c>)
 8000182:	f000 fbc3 	bl	800090c <Alcd_Clear>
  uint8_t HH=0;
 8000186:	2300      	movs	r3, #0
 8000188:	73fb      	strb	r3, [r7, #15]
  uint8_t MM=0;
 800018a:	2300      	movs	r3, #0
 800018c:	73bb      	strb	r3, [r7, #14]
  uint8_t SS=0;
 800018e:	2300      	movs	r3, #0
 8000190:	737b      	strb	r3, [r7, #13]
  uint16_t mm=0;
 8000192:	2300      	movs	r3, #0
 8000194:	817b      	strh	r3, [r7, #10]
  uint8_t length;

  /* USER CODE END 2 */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000196:	4b52      	ldr	r3, [pc, #328]	; (80002e0 <main+0x194>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	4a51      	ldr	r2, [pc, #324]	; (80002e0 <main+0x194>)
 800019c:	f043 0308 	orr.w	r3, r3, #8
 80001a0:	6193      	str	r3, [r2, #24]
 80001a2:	4b4f      	ldr	r3, [pc, #316]	; (80002e0 <main+0x194>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	f003 0308 	and.w	r3, r3, #8
 80001aa:	607b      	str	r3, [r7, #4]
 80001ac:	687b      	ldr	r3, [r7, #4]
  Keypad_Matrix_init(&kp);
 80001ae:	484d      	ldr	r0, [pc, #308]	; (80002e4 <main+0x198>)
 80001b0:	f000 fc65 	bl	8000a7e <Keypad_Matrix_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Keypad_Matrix_refresh(&kp);
 80001b4:	484b      	ldr	r0, [pc, #300]	; (80002e4 <main+0x198>)
 80001b6:	f000 fc71 	bl	8000a9c <Keypad_Matrix_refresh>
	  if(Keypad_Matrix_ReadKey(&kp, 1))
 80001ba:	2101      	movs	r1, #1
 80001bc:	4849      	ldr	r0, [pc, #292]	; (80002e4 <main+0x198>)
 80001be:	f000 fca2 	bl	8000b06 <Keypad_Matrix_ReadKey>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0f5      	beq.n	80001b4 <main+0x68>
	  {
		  while(1)
		  {
			  Keypad_Matrix_refresh(&kp);
 80001c8:	4846      	ldr	r0, [pc, #280]	; (80002e4 <main+0x198>)
 80001ca:	f000 fc67 	bl	8000a9c <Keypad_Matrix_refresh>
			  if(Keypad_Matrix_ReadKey(&kp, 2))
 80001ce:	2102      	movs	r1, #2
 80001d0:	4844      	ldr	r0, [pc, #272]	; (80002e4 <main+0x198>)
 80001d2:	f000 fc98 	bl	8000b06 <Keypad_Matrix_ReadKey>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d01a      	beq.n	8000212 <main+0xc6>
			  {
				  while(1)
				  {
					  Keypad_Matrix_refresh(&kp);
 80001dc:	4841      	ldr	r0, [pc, #260]	; (80002e4 <main+0x198>)
 80001de:	f000 fc5d 	bl	8000a9c <Keypad_Matrix_refresh>
					  if(Keypad_Matrix_ReadKey(&kp, 1))
 80001e2:	2101      	movs	r1, #1
 80001e4:	483f      	ldr	r0, [pc, #252]	; (80002e4 <main+0x198>)
 80001e6:	f000 fc8e 	bl	8000b06 <Keypad_Matrix_ReadKey>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10f      	bne.n	8000210 <main+0xc4>
					  {
						  break;
					  }
					  if(Keypad_Matrix_ReadKey(&kp, 3))
 80001f0:	2103      	movs	r1, #3
 80001f2:	483c      	ldr	r0, [pc, #240]	; (80002e4 <main+0x198>)
 80001f4:	f000 fc87 	bl	8000b06 <Keypad_Matrix_ReadKey>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0ee      	beq.n	80001dc <main+0x90>
					  {
					  	mm=0; SS=0; MM=0; HH=0;
 80001fe:	2300      	movs	r3, #0
 8000200:	817b      	strh	r3, [r7, #10]
 8000202:	2300      	movs	r3, #0
 8000204:	737b      	strb	r3, [r7, #13]
 8000206:	2300      	movs	r3, #0
 8000208:	73bb      	strb	r3, [r7, #14]
 800020a:	2300      	movs	r3, #0
 800020c:	73fb      	strb	r3, [r7, #15]
					  	break;
 800020e:	e000      	b.n	8000212 <main+0xc6>
						  break;
 8000210:	bf00      	nop
					  }
				  }
			  }
			  if(Keypad_Matrix_ReadKey(&kp, 3))
 8000212:	2103      	movs	r1, #3
 8000214:	4833      	ldr	r0, [pc, #204]	; (80002e4 <main+0x198>)
 8000216:	f000 fc76 	bl	8000b06 <Keypad_Matrix_ReadKey>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d007      	beq.n	8000230 <main+0xe4>
			  {
				 mm=0; SS=0; MM=0; HH=0;
 8000220:	2300      	movs	r3, #0
 8000222:	817b      	strh	r3, [r7, #10]
 8000224:	2300      	movs	r3, #0
 8000226:	737b      	strb	r3, [r7, #13]
 8000228:	2300      	movs	r3, #0
 800022a:	73bb      	strb	r3, [r7, #14]
 800022c:	2300      	movs	r3, #0
 800022e:	73fb      	strb	r3, [r7, #15]
			  }
			  if(mm>=0 && mm<9)
 8000230:	897b      	ldrh	r3, [r7, #10]
 8000232:	2b08      	cmp	r3, #8
 8000234:	d802      	bhi.n	800023c <main+0xf0>
			  {
				  mm++;
 8000236:	897b      	ldrh	r3, [r7, #10]
 8000238:	3301      	adds	r3, #1
 800023a:	817b      	strh	r3, [r7, #10]
			  }
			  if(mm==9)
 800023c:	897b      	ldrh	r3, [r7, #10]
 800023e:	2b09      	cmp	r3, #9
 8000240:	d104      	bne.n	800024c <main+0x100>
			  {
				  SS++;
 8000242:	7b7b      	ldrb	r3, [r7, #13]
 8000244:	3301      	adds	r3, #1
 8000246:	737b      	strb	r3, [r7, #13]
				  mm=0;
 8000248:	2300      	movs	r3, #0
 800024a:	817b      	strh	r3, [r7, #10]
			  }
			  if(SS==59)
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	2b3b      	cmp	r3, #59	; 0x3b
 8000250:	d104      	bne.n	800025c <main+0x110>
			  {
				  MM++;
 8000252:	7bbb      	ldrb	r3, [r7, #14]
 8000254:	3301      	adds	r3, #1
 8000256:	73bb      	strb	r3, [r7, #14]
				  SS=0;
 8000258:	2300      	movs	r3, #0
 800025a:	737b      	strb	r3, [r7, #13]
			  }
			  if(MM==59)
 800025c:	7bbb      	ldrb	r3, [r7, #14]
 800025e:	2b3b      	cmp	r3, #59	; 0x3b
 8000260:	d104      	bne.n	800026c <main+0x120>
			  {
				  HH++;
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	3301      	adds	r3, #1
 8000266:	73fb      	strb	r3, [r7, #15]
				  MM=0;
 8000268:	2300      	movs	r3, #0
 800026a:	73bb      	strb	r3, [r7, #14]
			  }
			  if(HH==59 && MM==59 && SS==59 && mm==1000)
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	2b3b      	cmp	r3, #59	; 0x3b
 8000270:	d10b      	bne.n	800028a <main+0x13e>
 8000272:	7bbb      	ldrb	r3, [r7, #14]
 8000274:	2b3b      	cmp	r3, #59	; 0x3b
 8000276:	d108      	bne.n	800028a <main+0x13e>
 8000278:	7b7b      	ldrb	r3, [r7, #13]
 800027a:	2b3b      	cmp	r3, #59	; 0x3b
 800027c:	d105      	bne.n	800028a <main+0x13e>
 800027e:	897b      	ldrh	r3, [r7, #10]
 8000280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000284:	d101      	bne.n	800028a <main+0x13e>
			  {
				  HH=0;
 8000286:	2300      	movs	r3, #0
 8000288:	73fb      	strb	r3, [r7, #15]
			  }
			  HAL_Delay(100);
 800028a:	2064      	movs	r0, #100	; 0x64
 800028c:	f000 fcfa 	bl	8000c84 <HAL_Delay>
			  sprintf(stringaya, "%02d:%02d:%02d.%d", HH, MM, SS, mm);
 8000290:	7bf9      	ldrb	r1, [r7, #15]
 8000292:	7bb8      	ldrb	r0, [r7, #14]
 8000294:	7b7b      	ldrb	r3, [r7, #13]
 8000296:	897a      	ldrh	r2, [r7, #10]
 8000298:	9201      	str	r2, [sp, #4]
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	4603      	mov	r3, r0
 800029e:	460a      	mov	r2, r1
 80002a0:	4911      	ldr	r1, [pc, #68]	; (80002e8 <main+0x19c>)
 80002a2:	4812      	ldr	r0, [pc, #72]	; (80002ec <main+0x1a0>)
 80002a4:	f001 fb7a 	bl	800199c <siprintf>
			  length =sprintf(stringaya, "%02d:%02d:%02d.%d", HH, MM, SS, mm);
 80002a8:	7bf9      	ldrb	r1, [r7, #15]
 80002aa:	7bb8      	ldrb	r0, [r7, #14]
 80002ac:	7b7b      	ldrb	r3, [r7, #13]
 80002ae:	897a      	ldrh	r2, [r7, #10]
 80002b0:	9201      	str	r2, [sp, #4]
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	4603      	mov	r3, r0
 80002b6:	460a      	mov	r2, r1
 80002b8:	490b      	ldr	r1, [pc, #44]	; (80002e8 <main+0x19c>)
 80002ba:	480c      	ldr	r0, [pc, #48]	; (80002ec <main+0x1a0>)
 80002bc:	f001 fb6e 	bl	800199c <siprintf>
 80002c0:	4603      	mov	r3, r0
 80002c2:	727b      	strb	r3, [r7, #9]
			  Alcd_PutAt_n(&lcd1,0, 0, stringaya, length);
 80002c4:	7a7b      	ldrb	r3, [r7, #9]
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <main+0x1a0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	2100      	movs	r1, #0
 80002ce:	4802      	ldr	r0, [pc, #8]	; (80002d8 <main+0x18c>)
 80002d0:	f000 fb03 	bl	80008da <Alcd_PutAt_n>
			  Keypad_Matrix_refresh(&kp);
 80002d4:	e778      	b.n	80001c8 <main+0x7c>
 80002d6:	bf00      	nop
 80002d8:	20000000 	.word	0x20000000
 80002dc:	08002318 	.word	0x08002318
 80002e0:	40021000 	.word	0x40021000
 80002e4:	20000020 	.word	0x20000020
 80002e8:	08002324 	.word	0x08002324
 80002ec:	200000b8 	.word	0x200000b8

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b090      	sub	sp, #64	; 0x40
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fb6c 	bl	80019dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000312:	2302      	movs	r3, #2
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000316:	2301      	movs	r3, #1
 8000318:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031a:	2310      	movs	r3, #16
 800031c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031e:	2300      	movs	r3, #0
 8000320:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	4618      	mov	r0, r3
 8000328:	f000 ff50 	bl	80011cc <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000332:	f000 f83b 	bl	80003ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f9be 	bl	80016d0 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800035a:	f000 f827 	bl	80003ac <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	; 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000374:	f043 0320 	orr.w	r3, r3, #32
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_GPIO_Init+0x40>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0320 	and.w	r3, r3, #32
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <MX_GPIO_Init+0x40>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_GPIO_Init+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40021000 	.word	0x40021000

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
}
 80003b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <Error_Handler+0x8>
	...

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <HAL_MspInit+0x5c>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <HAL_MspInit+0x5c>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <HAL_MspInit+0x5c>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <HAL_MspInit+0x5c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_MspInit+0x5c>)
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x5c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <HAL_MspInit+0x60>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_MspInit+0x60>)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000
 8000418:	40010000 	.word	0x40010000

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <NMI_Handler+0x4>

08000422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <HardFault_Handler+0x4>

08000428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <MemManage_Handler+0x4>

0800042e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <UsageFault_Handler+0x4>

0800043a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000462:	f000 fbf3 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000474:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <_sbrk+0x5c>)
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <_sbrk+0x60>)
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <_sbrk+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <_sbrk+0x64>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <_sbrk+0x68>)
 800048c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <_sbrk+0x64>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	693a      	ldr	r2, [r7, #16]
 8000498:	429a      	cmp	r2, r3
 800049a:	d207      	bcs.n	80004ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800049c:	f001 faa6 	bl	80019ec <__errno>
 80004a0:	4603      	mov	r3, r0
 80004a2:	220c      	movs	r2, #12
 80004a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
 80004aa:	e009      	b.n	80004c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <_sbrk+0x64>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <_sbrk+0x64>)
 80004bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20005000 	.word	0x20005000
 80004cc:	00000400 	.word	0x00000400
 80004d0:	200000c8 	.word	0x200000c8
 80004d4:	20000218 	.word	0x20000218

080004d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e4:	f7ff fff8 	bl	80004d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004ea:	490c      	ldr	r1, [pc, #48]	; (800051c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a09      	ldr	r2, [pc, #36]	; (8000524 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000500:	4c09      	ldr	r4, [pc, #36]	; (8000528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050e:	f001 fa73 	bl	80019f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe1b 	bl	800014c <main>
  bx lr
 8000516:	4770      	bx	lr
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000520:	08002398 	.word	0x08002398
  ldr r2, =_sbss
 8000524:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000528:	20000218 	.word	0x20000218

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <DWT_Delay_Init+0x58>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <DWT_Delay_Init+0x58>)
 800053a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800053e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <DWT_Delay_Init+0x58>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	4a10      	ldr	r2, [pc, #64]	; (8000588 <DWT_Delay_Init+0x58>)
 8000546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800054a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <DWT_Delay_Init+0x5c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <DWT_Delay_Init+0x5c>)
 8000552:	f023 0301 	bic.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <DWT_Delay_Init+0x5c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a0b      	ldr	r2, [pc, #44]	; (800058c <DWT_Delay_Init+0x5c>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <DWT_Delay_Init+0x5c>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800056a:	bf00      	nop
     __ASM volatile ("NOP");
 800056c:	bf00      	nop
  __ASM volatile ("NOP");
 800056e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <DWT_Delay_Init+0x5c>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000578:	2300      	movs	r3, #0
 800057a:	e000      	b.n	800057e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800057c:	2301      	movs	r3, #1
  }
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000edf0 	.word	0xe000edf0
 800058c:	e0001000 	.word	0xe0001000

08000590 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <DWT_Delay_us+0x40>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800059e:	f001 f9d5 	bl	800194c <HAL_RCC_GetHCLKFreq>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <DWT_Delay_us+0x44>)
 80005a6:	fba2 2303 	umull	r2, r3, r2, r3
 80005aa:	0c9b      	lsrs	r3, r3, #18
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80005b4:	bf00      	nop
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <DWT_Delay_us+0x40>)
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	1ad2      	subs	r2, r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3f8      	bcc.n	80005b6 <DWT_Delay_us+0x26>
		;
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	e0001000 	.word	0xe0001000
 80005d4:	431bde83 	.word	0x431bde83

080005d8 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffd3 	bl	8000590 <DWT_Delay_us>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	68da      	ldr	r2, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	7a1b      	ldrb	r3, [r3, #8]
 8000608:	4619      	mov	r1, r3
 800060a:	230f      	movs	r3, #15
 800060c:	408b      	lsls	r3, r1
 800060e:	43db      	mvns	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	400a      	ands	r2, r1
 8000618:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	7a09      	ldrb	r1, [r1, #8]
 8000626:	408b      	lsls	r3, r1
 8000628:	4619      	mov	r1, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	430a      	orrs	r2, r1
 8000630:	60da      	str	r2, [r3, #12]
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6958      	ldr	r0, [r3, #20]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	8b1b      	ldrh	r3, [r3, #24]
 8000650:	78fa      	ldrb	r2, [r7, #3]
 8000652:	4619      	mov	r1, r3
 8000654:	f000 fda2 	bl	800119c <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	68d8      	ldr	r0, [r3, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	8a1b      	ldrh	r3, [r3, #16]
 8000674:	78fa      	ldrb	r2, [r7, #3]
 8000676:	4619      	mov	r1, r3
 8000678:	f000 fd90 	bl	800119c <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f107 0208 	add.w	r2, r7, #8
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fbee 	bl	8000e94 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	8a1b      	ldrh	r3, [r3, #16]
 80006bc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	f107 0208 	add.w	r2, r7, #8
 80006c6:	4611      	mov	r1, r2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fbe3 	bl	8000e94 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7a1b      	ldrb	r3, [r3, #8]
 80006d2:	461a      	mov	r2, r3
 80006d4:	230f      	movs	r3, #15
 80006d6:	4093      	lsls	r3, r2
 80006d8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f107 0208 	add.w	r2, r7, #8
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fbd5 	bl	8000e94 <HAL_GPIO_Init>
}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	460b      	mov	r3, r1
 80006fc:	70fb      	strb	r3, [r7, #3]
 80006fe:	4613      	mov	r3, r2
 8000700:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	4619      	mov	r1, r3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff98 	bl	800063c <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 800070c:	78bb      	ldrb	r3, [r7, #2]
 800070e:	091b      	lsrs	r3, r3, #4
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff6c 	bl	80005f2 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 800071a:	2101      	movs	r1, #1
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff9f 	bl	8000660 <EN_SET>
 8000722:	200a      	movs	r0, #10
 8000724:	f7ff ff58 	bl	80005d8 <usDelay>
 8000728:	2100      	movs	r1, #0
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ff98 	bl	8000660 <EN_SET>
 8000730:	2064      	movs	r0, #100	; 0x64
 8000732:	f7ff ff51 	bl	80005d8 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8000736:	78bb      	ldrb	r3, [r7, #2]
 8000738:	4619      	mov	r1, r3
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ff59 	bl	80005f2 <Write_HalfByte>
	PulseEn
 8000740:	2101      	movs	r1, #1
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff8c 	bl	8000660 <EN_SET>
 8000748:	200a      	movs	r0, #10
 800074a:	f7ff ff45 	bl	80005d8 <usDelay>
 800074e:	2100      	movs	r1, #0
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff85 	bl	8000660 <EN_SET>
 8000756:	2064      	movs	r0, #100	; 0x64
 8000758:	f7ff ff3e 	bl	80005d8 <usDelay>
	;
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
 8000770:	4613      	mov	r3, r2
 8000772:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8000774:	f7ff fedc 	bl	8000530 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff83 	bl	8000684 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2240      	movs	r2, #64	; 0x40
 8000788:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	78ba      	ldrb	r2, [r7, #2]
 800078e:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8000790:	78bb      	ldrb	r3, [r7, #2]
 8000792:	3340      	adds	r3, #64	; 0x40
 8000794:	b2da      	uxtb	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 800079a:	2100      	movs	r1, #0
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff4d 	bl	800063c <RS_SET>
	EN_SET(lcd, 0);
 80007a2:	2100      	movs	r1, #0
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff5b 	bl	8000660 <EN_SET>
	usDelay(50000);
 80007aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007ae:	f7ff ff13 	bl	80005d8 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e018      	b.n	80007ea <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 80007b8:	2103      	movs	r1, #3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff19 	bl	80005f2 <Write_HalfByte>
		PulseEn
 80007c0:	2101      	movs	r1, #1
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff4c 	bl	8000660 <EN_SET>
 80007c8:	200a      	movs	r0, #10
 80007ca:	f7ff ff05 	bl	80005d8 <usDelay>
 80007ce:	2100      	movs	r1, #0
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff45 	bl	8000660 <EN_SET>
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f7ff fefe 	bl	80005d8 <usDelay>
		;
		usDelay(4500);
 80007dc:	f241 1094 	movw	r0, #4500	; 0x1194
 80007e0:	f7ff fefa 	bl	80005d8 <usDelay>
	for (x = 0; x < 2; x++)
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	3301      	adds	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d9e3      	bls.n	80007b8 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 80007f0:	2103      	movs	r1, #3
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fefd 	bl	80005f2 <Write_HalfByte>
	PulseEn
 80007f8:	2101      	movs	r1, #1
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff30 	bl	8000660 <EN_SET>
 8000800:	200a      	movs	r0, #10
 8000802:	f7ff fee9 	bl	80005d8 <usDelay>
 8000806:	2100      	movs	r1, #0
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff29 	bl	8000660 <EN_SET>
 800080e:	2064      	movs	r0, #100	; 0x64
 8000810:	f7ff fee2 	bl	80005d8 <usDelay>
	;
	usDelay(150);
 8000814:	2096      	movs	r0, #150	; 0x96
 8000816:	f7ff fedf 	bl	80005d8 <usDelay>
	Write_HalfByte(lcd, 0x02);
 800081a:	2102      	movs	r1, #2
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fee8 	bl	80005f2 <Write_HalfByte>
	PulseEn
 8000822:	2101      	movs	r1, #1
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff1b 	bl	8000660 <EN_SET>
 800082a:	200a      	movs	r0, #10
 800082c:	f7ff fed4 	bl	80005d8 <usDelay>
 8000830:	2100      	movs	r1, #0
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff14 	bl	8000660 <EN_SET>
 8000838:	2064      	movs	r0, #100	; 0x64
 800083a:	f7ff fecd 	bl	80005d8 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 800083e:	2228      	movs	r2, #40	; 0x28
 8000840:	2100      	movs	r1, #0
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ff55 	bl	80006f2 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000848:	2300      	movs	r3, #0
 800084a:	2200      	movs	r2, #0
 800084c:	2101      	movs	r1, #1
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f86d 	bl	800092e <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f859 	bl	800090c <Alcd_Clear>
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	460b      	mov	r3, r1
 800086c:	70fb      	strb	r3, [r7, #3]
 800086e:	4613      	mov	r3, r2
 8000870:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	7e9a      	ldrb	r2, [r3, #26]
 800087a:	78bb      	ldrb	r3, [r7, #2]
 800087c:	4413      	add	r3, r2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	b25b      	sxtb	r3, r3
 8000882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000886:	b25b      	sxtb	r3, r3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ff2f 	bl	80006f2 <Alcd_SendByte>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	75fb      	strb	r3, [r7, #23]
 80008ae:	e00b      	b.n	80008c8 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	60ba      	str	r2, [r7, #8]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	2101      	movs	r1, #1
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff ff18 	bl	80006f2 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	3301      	adds	r3, #1
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	7dfa      	ldrb	r2, [r7, #23]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3ef      	bcc.n	80008b0 <Alcd_Put_n+0x14>
	}
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	72fb      	strb	r3, [r7, #11]
 80008e8:	4613      	mov	r3, r2
 80008ea:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 80008ec:	7aba      	ldrb	r2, [r7, #10]
 80008ee:	7afb      	ldrb	r3, [r7, #11]
 80008f0:	4619      	mov	r1, r3
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f7ff ffb5 	bl	8000862 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 80008f8:	7e3b      	ldrb	r3, [r7, #24]
 80008fa:	461a      	mov	r2, r3
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f7ff ffcc 	bl	800089c <Alcd_Put_n>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8000914:	2201      	movs	r2, #1
 8000916:	2100      	movs	r1, #0
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff feea 	bl	80006f2 <Alcd_SendByte>
	usDelay(2000);
 800091e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000922:	f7ff fe59 	bl	80005d8 <usDelay>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	4608      	mov	r0, r1
 8000938:	4611      	mov	r1, r2
 800093a:	461a      	mov	r2, r3
 800093c:	4603      	mov	r3, r0
 800093e:	70fb      	strb	r3, [r7, #3]
 8000940:	460b      	mov	r3, r1
 8000942:	70bb      	strb	r3, [r7, #2]
 8000944:	4613      	mov	r3, r2
 8000946:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7f9b      	ldrb	r3, [r3, #30]
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	b2da      	uxtb	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 8000962:	78bb      	ldrb	r3, [r7, #2]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7f9b      	ldrb	r3, [r3, #30]
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8000976:	787b      	ldrb	r3, [r7, #1]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d006      	beq.n	800098a <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7f9b      	ldrb	r3, [r3, #30]
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	b2da      	uxtb	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7f9b      	ldrb	r3, [r3, #30]
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	b2da      	uxtb	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7f9b      	ldrb	r3, [r3, #30]
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fea3 	bl	80006f2 <Alcd_SendByte>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HardwareInterface_initialize>:
 *  Created on: Feb 17, 2024
 *      Author: youstina
 */
#include "Matrix_Keypad.h"

void HardwareInterface_initialize(Keypad_Matrix_t *kp) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gp = { .Mode= GPIO_MODE_OUTPUT_PP, .Speed = GPIO_SPEED_LOW };
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	2301      	movs	r3, #1
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
	uint32_t Pins = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Rows; x++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
 80009da:	e00e      	b.n	80009fa <HardwareInterface_initialize+0x46>
		Pins |= (1 << (kp->Row_Start_Pin) + x);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7b1b      	ldrb	r3, [r3, #12]
 80009e0:	461a      	mov	r2, r3
 80009e2:	6a3b      	ldr	r3, [r7, #32]
 80009e4:	4413      	add	r3, r2
 80009e6:	2201      	movs	r2, #1
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	4313      	orrs	r3, r2
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Rows; x++) {
 80009f4:	6a3b      	ldr	r3, [r7, #32]
 80009f6:	3301      	adds	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	dbea      	blt.n	80009dc <HardwareInterface_initialize+0x28>
	}
	gp.Pin = Pins;
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(kp->Row_Port, &gp);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	f107 020c 	add.w	r2, r7, #12
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fa3d 	bl	8000e94 <HAL_GPIO_Init>

	kp->OutputMask = Pins;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1e:	61da      	str	r2, [r3, #28]
	gp.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
	gp.Pull = GPIO_PULLDOWN;
 8000a24:	2302      	movs	r3, #2
 8000a26:	617b      	str	r3, [r7, #20]
	Pins = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Columns; x++) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	e00e      	b.n	8000a50 <HardwareInterface_initialize+0x9c>
		Pins |= (1 << (kp->Column_Start_Pin) + x);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7d1b      	ldrb	r3, [r3, #20]
 8000a36:	461a      	mov	r2, r3
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	4313      	orrs	r3, r2
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Columns; x++) {
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	461a      	mov	r2, r3
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	dbea      	blt.n	8000a32 <HardwareInterface_initialize+0x7e>
	}
	gp.Pin = Pins;
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(kp->Column_Port, &gp);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fa12 	bl	8000e94 <HAL_GPIO_Init>
	kp->InputMask = Pins;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a74:	619a      	str	r2, [r3, #24]
}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <Keypad_Matrix_init>:
void Keypad_Matrix_init(Keypad_Matrix_t *kp) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	HardwareInterface_initialize(kp);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ff94 	bl	80009b4 <HardwareInterface_initialize>
	HardwareInterface_SetOutputs(kp, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f850 	bl	8000b34 <HardwareInterface_SetOutputs>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <Keypad_Matrix_refresh>:
void Keypad_Matrix_refresh(Keypad_Matrix_t *kp) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	kp->Button_Status = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
	uint8_t scan = 0b00000001;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
	for (uint8_t x = 0; x < kp->Rows; x++) { //kp is pointer to struct that includes number of rows
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73bb      	strb	r3, [r7, #14]
 8000ab2:	e01e      	b.n	8000af2 <Keypad_Matrix_refresh+0x56>
		HardwareInterface_SetOutputs(kp, scan); //the pins of the rows are now outputs with value scan
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f83b 	bl	8000b34 <HardwareInterface_SetOutputs>
		Hardware_Generate_Delay(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 f859 	bl	8000b76 <Hardware_Generate_Delay>
		kp->Button_Status |= HardwareInterface_Get_Inputs(kp) << (x * kp->Columns); //each row read is shifted by the number of rows
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f863 	bl	8000b90 <HardwareInterface_Get_Inputs>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4619      	mov	r1, r3
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	7852      	ldrb	r2, [r2, #1]
 8000ad4:	fb02 f303 	mul.w	r3, r2, r3
 8000ad8:	fa01 f203 	lsl.w	r2, r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	605a      	str	r2, [r3, #4]
	scan <<= 1; //scan =scan<<1
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
	for (uint8_t x = 0; x < kp->Rows; x++) { //kp is pointer to struct that includes number of rows
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	3301      	adds	r3, #1
 8000af0:	73bb      	strb	r3, [r7, #14]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	7bba      	ldrb	r2, [r7, #14]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d3db      	bcc.n	8000ab4 <Keypad_Matrix_refresh+0x18>

}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <Keypad_Matrix_ReadKey>:
uint8_t Keypad_Matrix_key_status(Keypad_Matrix_t *kp, uint8_t key) {

}
uint8_t Keypad_Matrix_ReadKey(Keypad_Matrix_t *kp, uint8_t key){
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	70fb      	strb	r3, [r7, #3]
	if(kp->Button_Status& (1<<key)){
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	78fa      	ldrb	r2, [r7, #3]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <Keypad_Matrix_ReadKey+0x22>
		return 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <Keypad_Matrix_ReadKey+0x24>
	}
	else{
		return 0;
 8000b28:	2300      	movs	r3, #0
	}
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <HardwareInterface_SetOutputs>:
static void HardwareInterface_SetOutputs(Keypad_Matrix_t *kp,
	uint8_t OutputStatus) {
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
kp->Row_Port->ODR &= ~kp->OutputMask;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	68d9      	ldr	r1, [r3, #12]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	400a      	ands	r2, r1
 8000b52:	60da      	str	r2, [r3, #12]
kp->Row_Port->ODR |= (uint32_t) OutputStatus << kp->Row_Start_Pin;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	68d9      	ldr	r1, [r3, #12]
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	7b12      	ldrb	r2, [r2, #12]
 8000b60:	fa03 f202 	lsl.w	r2, r3, r2
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	60da      	str	r2, [r3, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <Hardware_Generate_Delay>:
static void Hardware_Generate_Delay(uint16_t delay) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	80fb      	strh	r3, [r7, #6]
HAL_Delay(delay);
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f87e 	bl	8000c84 <HAL_Delay>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HardwareInterface_Get_Inputs>:
static uint8_t HardwareInterface_Get_Inputs(Keypad_Matrix_t *kp) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
uint32_t m = kp->Column_Port->IDR & kp->InputMask;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
m >>= kp->Column_Start_Pin;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7d1b      	ldrb	r3, [r3, #20]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
return (uint8_t) m;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	b2db      	uxtb	r3, r3
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x28>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x28>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f92b 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fbec 	bl	80003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f935 	bl	8000e7a <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f90b 	bl	8000e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000040 	.word	0x20000040
 8000c44:	20000048 	.word	0x20000048
 8000c48:	20000044 	.word	0x20000044

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000048 	.word	0x20000048
 8000c6c:	200000cc 	.word	0x200000cc

08000c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	200000cc 	.word	0x200000cc

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffe0 	bl	8000c70 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000048 	.word	0x20000048

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	; (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	; (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff90 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff49 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff5e 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff90 	bl	8000d84 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5f 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffb0 	bl	8000de8 <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b08b      	sub	sp, #44	; 0x2c
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea6:	e169      	b.n	800117c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	69fa      	ldr	r2, [r7, #28]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 8158 	bne.w	8001176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	4a9a      	ldr	r2, [pc, #616]	; (8001134 <HAL_GPIO_Init+0x2a0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d05e      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000ed0:	4a98      	ldr	r2, [pc, #608]	; (8001134 <HAL_GPIO_Init+0x2a0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d875      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000ed6:	4a98      	ldr	r2, [pc, #608]	; (8001138 <HAL_GPIO_Init+0x2a4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d058      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000edc:	4a96      	ldr	r2, [pc, #600]	; (8001138 <HAL_GPIO_Init+0x2a4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d86f      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000ee2:	4a96      	ldr	r2, [pc, #600]	; (800113c <HAL_GPIO_Init+0x2a8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d052      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000ee8:	4a94      	ldr	r2, [pc, #592]	; (800113c <HAL_GPIO_Init+0x2a8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d869      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000eee:	4a94      	ldr	r2, [pc, #592]	; (8001140 <HAL_GPIO_Init+0x2ac>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d04c      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000ef4:	4a92      	ldr	r2, [pc, #584]	; (8001140 <HAL_GPIO_Init+0x2ac>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d863      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000efa:	4a92      	ldr	r2, [pc, #584]	; (8001144 <HAL_GPIO_Init+0x2b0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d046      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000f00:	4a90      	ldr	r2, [pc, #576]	; (8001144 <HAL_GPIO_Init+0x2b0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d85d      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d82a      	bhi.n	8000f60 <HAL_GPIO_Init+0xcc>
 8000f0a:	2b12      	cmp	r3, #18
 8000f0c:	d859      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <HAL_GPIO_Init+0x80>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f8f 	.word	0x08000f8f
 8000f18:	08000f69 	.word	0x08000f69
 8000f1c:	08000f7b 	.word	0x08000f7b
 8000f20:	08000fbd 	.word	0x08000fbd
 8000f24:	08000fc3 	.word	0x08000fc3
 8000f28:	08000fc3 	.word	0x08000fc3
 8000f2c:	08000fc3 	.word	0x08000fc3
 8000f30:	08000fc3 	.word	0x08000fc3
 8000f34:	08000fc3 	.word	0x08000fc3
 8000f38:	08000fc3 	.word	0x08000fc3
 8000f3c:	08000fc3 	.word	0x08000fc3
 8000f40:	08000fc3 	.word	0x08000fc3
 8000f44:	08000fc3 	.word	0x08000fc3
 8000f48:	08000fc3 	.word	0x08000fc3
 8000f4c:	08000fc3 	.word	0x08000fc3
 8000f50:	08000fc3 	.word	0x08000fc3
 8000f54:	08000fc3 	.word	0x08000fc3
 8000f58:	08000f71 	.word	0x08000f71
 8000f5c:	08000f85 	.word	0x08000f85
 8000f60:	4a79      	ldr	r2, [pc, #484]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f66:	e02c      	b.n	8000fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e029      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	3304      	adds	r3, #4
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e024      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	3308      	adds	r3, #8
 8000f80:	623b      	str	r3, [r7, #32]
          break;
 8000f82:	e01f      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	330c      	adds	r3, #12
 8000f8a:	623b      	str	r3, [r7, #32]
          break;
 8000f8c:	e01a      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f96:	2304      	movs	r3, #4
 8000f98:	623b      	str	r3, [r7, #32]
          break;
 8000f9a:	e013      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d105      	bne.n	8000fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	611a      	str	r2, [r3, #16]
          break;
 8000fae:	e009      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	615a      	str	r2, [r3, #20]
          break;
 8000fba:	e003      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
          break;
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          break;
 8000fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2bff      	cmp	r3, #255	; 0xff
 8000fc8:	d801      	bhi.n	8000fce <HAL_GPIO_Init+0x13a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	e001      	b.n	8000fd2 <HAL_GPIO_Init+0x13e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d802      	bhi.n	8000fe0 <HAL_GPIO_Init+0x14c>
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x152>
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	3b08      	subs	r3, #8
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	210f      	movs	r1, #15
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	6a39      	ldr	r1, [r7, #32]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 80b1 	beq.w	8001176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001014:	4b4d      	ldr	r3, [pc, #308]	; (800114c <HAL_GPIO_Init+0x2b8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_GPIO_Init+0x2b8>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <HAL_GPIO_Init+0x2b8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800102c:	4a48      	ldr	r2, [pc, #288]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4013      	ands	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a40      	ldr	r2, [pc, #256]	; (8001154 <HAL_GPIO_Init+0x2c0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d013      	beq.n	8001080 <HAL_GPIO_Init+0x1ec>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a3f      	ldr	r2, [pc, #252]	; (8001158 <HAL_GPIO_Init+0x2c4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d00d      	beq.n	800107c <HAL_GPIO_Init+0x1e8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a3e      	ldr	r2, [pc, #248]	; (800115c <HAL_GPIO_Init+0x2c8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d007      	beq.n	8001078 <HAL_GPIO_Init+0x1e4>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a3d      	ldr	r2, [pc, #244]	; (8001160 <HAL_GPIO_Init+0x2cc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d101      	bne.n	8001074 <HAL_GPIO_Init+0x1e0>
 8001070:	2303      	movs	r3, #3
 8001072:	e006      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001074:	2304      	movs	r3, #4
 8001076:	e004      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001078:	2302      	movs	r3, #2
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001080:	2300      	movs	r3, #0
 8001082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001084:	f002 0203 	and.w	r2, r2, #3
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	4093      	lsls	r3, r2
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001092:	492f      	ldr	r1, [pc, #188]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	492c      	ldr	r1, [pc, #176]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4928      	ldr	r1, [pc, #160]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	4922      	ldr	r1, [pc, #136]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60cb      	str	r3, [r1, #12]
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	491e      	ldr	r1, [pc, #120]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4918      	ldr	r1, [pc, #96]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	43db      	mvns	r3, r3
 8001112:	4914      	ldr	r1, [pc, #80]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 8001114:	4013      	ands	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d021      	beq.n	8001168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	490e      	ldr	r1, [pc, #56]	; (8001164 <HAL_GPIO_Init+0x2d0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
 8001130:	e021      	b.n	8001176 <HAL_GPIO_Init+0x2e2>
 8001132:	bf00      	nop
 8001134:	10320000 	.word	0x10320000
 8001138:	10310000 	.word	0x10310000
 800113c:	10220000 	.word	0x10220000
 8001140:	10210000 	.word	0x10210000
 8001144:	10120000 	.word	0x10120000
 8001148:	10110000 	.word	0x10110000
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40011000 	.word	0x40011000
 8001160:	40011400 	.word	0x40011400
 8001164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_GPIO_Init+0x304>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	43db      	mvns	r3, r3
 8001170:	4909      	ldr	r1, [pc, #36]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001172:	4013      	ands	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	3301      	adds	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	fa22 f303 	lsr.w	r3, r2, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	f47f ae8e 	bne.w	8000ea8 <HAL_GPIO_Init+0x14>
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	372c      	adds	r7, #44	; 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40010400 	.word	0x40010400

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	611a      	str	r2, [r3, #16]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e272      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8087 	beq.w	80012fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ec:	4b92      	ldr	r3, [pc, #584]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d00c      	beq.n	8001212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f8:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d112      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001210:	d10b      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001212:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d06c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x12c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d168      	bne.n	80012f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e24c      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x76>
 8001234:	4b80      	ldr	r3, [pc, #512]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a7f      	ldr	r2, [pc, #508]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800123a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e02e      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x98>
 800124a:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a7a      	ldr	r2, [pc, #488]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a77      	ldr	r2, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0xbc>
 800126e:	4b72      	ldr	r3, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a71      	ldr	r2, [pc, #452]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6e      	ldr	r2, [pc, #440]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001288:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a67      	ldr	r2, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fce2 	bl	8000c70 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fcde 	bl	8000c70 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e200      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe4>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcce 	bl	8000c70 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fcca 	bl	8000c70 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1ec      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x10c>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001306:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001312:	4b49      	ldr	r3, [pc, #292]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x18c>
 800131e:	4b46      	ldr	r3, [pc, #280]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x176>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1c0      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4939      	ldr	r1, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_RCC_OscConfig+0x270>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fc83 	bl	8000c70 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fc7f 	bl	8000c70 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1a1      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4927      	ldr	r1, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_RCC_OscConfig+0x270>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc62 	bl	8000c70 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc5e 	bl	8000c70 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e180      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d03a      	beq.n	8001450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d019      	beq.n	8001416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_RCC_OscConfig+0x274>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff fc42 	bl	8000c70 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc3e 	bl	8000c70 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e160      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f000 faa6 	bl	8001960 <RCC_Delay>
 8001414:	e01c      	b.n	8001450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_RCC_OscConfig+0x274>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fc28 	bl	8000c70 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001422:	e00f      	b.n	8001444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fc24 	bl	8000c70 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d908      	bls.n	8001444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e146      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	42420000 	.word	0x42420000
 8001440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e9      	bne.n	8001424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a6 	beq.w	80015aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b8b      	ldr	r3, [pc, #556]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a87      	ldr	r2, [pc, #540]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b85      	ldr	r3, [pc, #532]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7e      	ldr	r2, [pc, #504]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fbe5 	bl	8000c70 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff fbe1 	bl	8000c70 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e103      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x312>
 80014d0:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e02d      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x334>
 80014e6:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a69      	ldr	r2, [pc, #420]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6213      	str	r3, [r2, #32]
 80014f2:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a66      	ldr	r2, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x356>
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a60      	ldr	r2, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a5d      	ldr	r2, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 8001522:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb95 	bl	8000c70 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fb91 	bl	8000c70 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0b1      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x37e>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fb7f 	bl	8000c70 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fb7b 	bl	8000c70 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e09b      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b40      	ldr	r3, [pc, #256]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8087 	beq.w	80016c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d061      	beq.n	8001684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d146      	bne.n	8001656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb4f 	bl	8000c70 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff fb4b 	bl	8000c70 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e06d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d108      	bne.n	8001610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4921      	ldr	r1, [pc, #132]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a19      	ldr	r1, [r3, #32]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	430b      	orrs	r3, r1
 8001622:	491b      	ldr	r1, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fb1f 	bl	8000c70 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff fb1b 	bl	8000c70 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e03d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x46a>
 8001654:	e035      	b.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb08 	bl	8000c70 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb04 	bl	8000c70 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e026      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x498>
 8001682:	e01e      	b.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e019      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
 8001698:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x500>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0d0      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d910      	bls.n	8001714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b67      	ldr	r3, [pc, #412]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 0207 	bic.w	r2, r3, #7
 80016fa:	4965      	ldr	r1, [pc, #404]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b63      	ldr	r3, [pc, #396]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0b8      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172c:	4b59      	ldr	r3, [pc, #356]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a58      	ldr	r2, [pc, #352]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001736:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800174e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	494d      	ldr	r1, [pc, #308]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d040      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d115      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e07f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e073      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06b      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4936      	ldr	r1, [pc, #216]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff fa56 	bl	8000c70 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff fa52 	bl	8000c70 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e053      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d210      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 0207 	bic.w	r2, r3, #7
 8001806:	4922      	ldr	r1, [pc, #136]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e032      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4916      	ldr	r1, [pc, #88]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800185e:	f000 f821 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490a      	ldr	r1, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_RCC_ClockConfig+0x1cc>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_RCC_ClockConfig+0x1d0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f9b4 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40022000 	.word	0x40022000
 8001894:	40021000 	.word	0x40021000
 8001898:	08002338 	.word	0x08002338
 800189c:	20000040 	.word	0x20000040
 80018a0:	20000044 	.word	0x20000044

080018a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_RCC_GetSysClockFreq+0x94>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d002      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x30>
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d003      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x36>
 80018d2:	e027      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_GetSysClockFreq+0x98>)
 80018d6:	613b      	str	r3, [r7, #16]
      break;
 80018d8:	e027      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0c9b      	lsrs	r3, r3, #18
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d010      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_GetSysClockFreq+0x94>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	0c5b      	lsrs	r3, r3, #17
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	4a11      	ldr	r2, [pc, #68]	; (8001944 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_RCC_GetSysClockFreq+0x98>)
 8001906:	fb03 f202 	mul.w	r2, r3, r2
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e004      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	613b      	str	r3, [r7, #16]
      break;
 8001922:	e002      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetSysClockFreq+0x98>)
 8001926:	613b      	str	r3, [r7, #16]
      break;
 8001928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192a:	693b      	ldr	r3, [r7, #16]
}
 800192c:	4618      	mov	r0, r3
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	007a1200 	.word	0x007a1200
 8001940:	08002348 	.word	0x08002348
 8001944:	08002358 	.word	0x08002358
 8001948:	003d0900 	.word	0x003d0900

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b02      	ldr	r3, [pc, #8]	; (800195c <HAL_RCC_GetHCLKFreq+0x10>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	20000040 	.word	0x20000040

08001960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <RCC_Delay+0x34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <RCC_Delay+0x38>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800197c:	bf00      	nop
  }
  while (Delay --);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <RCC_Delay+0x1c>
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000040 	.word	0x20000040
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <siprintf>:
 800199c:	b40e      	push	{r1, r2, r3}
 800199e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019a2:	b500      	push	{lr}
 80019a4:	b09c      	sub	sp, #112	; 0x70
 80019a6:	ab1d      	add	r3, sp, #116	; 0x74
 80019a8:	9002      	str	r0, [sp, #8]
 80019aa:	9006      	str	r0, [sp, #24]
 80019ac:	9107      	str	r1, [sp, #28]
 80019ae:	9104      	str	r1, [sp, #16]
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <siprintf+0x38>)
 80019b2:	4909      	ldr	r1, [pc, #36]	; (80019d8 <siprintf+0x3c>)
 80019b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80019b8:	9105      	str	r1, [sp, #20]
 80019ba:	6800      	ldr	r0, [r0, #0]
 80019bc:	a902      	add	r1, sp, #8
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	f000 f98e 	bl	8001ce0 <_svfiprintf_r>
 80019c4:	2200      	movs	r2, #0
 80019c6:	9b02      	ldr	r3, [sp, #8]
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	b01c      	add	sp, #112	; 0x70
 80019cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80019d0:	b003      	add	sp, #12
 80019d2:	4770      	bx	lr
 80019d4:	20000098 	.word	0x20000098
 80019d8:	ffff0208 	.word	0xffff0208

080019dc <memset>:
 80019dc:	4603      	mov	r3, r0
 80019de:	4402      	add	r2, r0
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d100      	bne.n	80019e6 <memset+0xa>
 80019e4:	4770      	bx	lr
 80019e6:	f803 1b01 	strb.w	r1, [r3], #1
 80019ea:	e7f9      	b.n	80019e0 <memset+0x4>

080019ec <__errno>:
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <__errno+0x8>)
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000098 	.word	0x20000098

080019f8 <__libc_init_array>:
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	2600      	movs	r6, #0
 80019fc:	4d0c      	ldr	r5, [pc, #48]	; (8001a30 <__libc_init_array+0x38>)
 80019fe:	4c0d      	ldr	r4, [pc, #52]	; (8001a34 <__libc_init_array+0x3c>)
 8001a00:	1b64      	subs	r4, r4, r5
 8001a02:	10a4      	asrs	r4, r4, #2
 8001a04:	42a6      	cmp	r6, r4
 8001a06:	d109      	bne.n	8001a1c <__libc_init_array+0x24>
 8001a08:	f000 fc7a 	bl	8002300 <_init>
 8001a0c:	2600      	movs	r6, #0
 8001a0e:	4d0a      	ldr	r5, [pc, #40]	; (8001a38 <__libc_init_array+0x40>)
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <__libc_init_array+0x44>)
 8001a12:	1b64      	subs	r4, r4, r5
 8001a14:	10a4      	asrs	r4, r4, #2
 8001a16:	42a6      	cmp	r6, r4
 8001a18:	d105      	bne.n	8001a26 <__libc_init_array+0x2e>
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a20:	4798      	blx	r3
 8001a22:	3601      	adds	r6, #1
 8001a24:	e7ee      	b.n	8001a04 <__libc_init_array+0xc>
 8001a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a2a:	4798      	blx	r3
 8001a2c:	3601      	adds	r6, #1
 8001a2e:	e7f2      	b.n	8001a16 <__libc_init_array+0x1e>
 8001a30:	08002390 	.word	0x08002390
 8001a34:	08002390 	.word	0x08002390
 8001a38:	08002390 	.word	0x08002390
 8001a3c:	08002394 	.word	0x08002394

08001a40 <__retarget_lock_acquire_recursive>:
 8001a40:	4770      	bx	lr

08001a42 <__retarget_lock_release_recursive>:
 8001a42:	4770      	bx	lr

08001a44 <_free_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4605      	mov	r5, r0
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	d040      	beq.n	8001ace <_free_r+0x8a>
 8001a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a50:	1f0c      	subs	r4, r1, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bfb8      	it	lt
 8001a56:	18e4      	addlt	r4, r4, r3
 8001a58:	f000 f8dc 	bl	8001c14 <__malloc_lock>
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <_free_r+0x8c>)
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	b933      	cbnz	r3, 8001a70 <_free_r+0x2c>
 8001a62:	6063      	str	r3, [r4, #4]
 8001a64:	6014      	str	r4, [r2, #0]
 8001a66:	4628      	mov	r0, r5
 8001a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a6c:	f000 b8d8 	b.w	8001c20 <__malloc_unlock>
 8001a70:	42a3      	cmp	r3, r4
 8001a72:	d908      	bls.n	8001a86 <_free_r+0x42>
 8001a74:	6820      	ldr	r0, [r4, #0]
 8001a76:	1821      	adds	r1, r4, r0
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	bf01      	itttt	eq
 8001a7c:	6819      	ldreq	r1, [r3, #0]
 8001a7e:	685b      	ldreq	r3, [r3, #4]
 8001a80:	1809      	addeq	r1, r1, r0
 8001a82:	6021      	streq	r1, [r4, #0]
 8001a84:	e7ed      	b.n	8001a62 <_free_r+0x1e>
 8001a86:	461a      	mov	r2, r3
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b10b      	cbz	r3, 8001a90 <_free_r+0x4c>
 8001a8c:	42a3      	cmp	r3, r4
 8001a8e:	d9fa      	bls.n	8001a86 <_free_r+0x42>
 8001a90:	6811      	ldr	r1, [r2, #0]
 8001a92:	1850      	adds	r0, r2, r1
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d10b      	bne.n	8001ab0 <_free_r+0x6c>
 8001a98:	6820      	ldr	r0, [r4, #0]
 8001a9a:	4401      	add	r1, r0
 8001a9c:	1850      	adds	r0, r2, r1
 8001a9e:	4283      	cmp	r3, r0
 8001aa0:	6011      	str	r1, [r2, #0]
 8001aa2:	d1e0      	bne.n	8001a66 <_free_r+0x22>
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4408      	add	r0, r1
 8001aaa:	6010      	str	r0, [r2, #0]
 8001aac:	6053      	str	r3, [r2, #4]
 8001aae:	e7da      	b.n	8001a66 <_free_r+0x22>
 8001ab0:	d902      	bls.n	8001ab8 <_free_r+0x74>
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	602b      	str	r3, [r5, #0]
 8001ab6:	e7d6      	b.n	8001a66 <_free_r+0x22>
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	1821      	adds	r1, r4, r0
 8001abc:	428b      	cmp	r3, r1
 8001abe:	bf01      	itttt	eq
 8001ac0:	6819      	ldreq	r1, [r3, #0]
 8001ac2:	685b      	ldreq	r3, [r3, #4]
 8001ac4:	1809      	addeq	r1, r1, r0
 8001ac6:	6021      	streq	r1, [r4, #0]
 8001ac8:	6063      	str	r3, [r4, #4]
 8001aca:	6054      	str	r4, [r2, #4]
 8001acc:	e7cb      	b.n	8001a66 <_free_r+0x22>
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
 8001ad0:	20000210 	.word	0x20000210

08001ad4 <sbrk_aligned>:
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4e0e      	ldr	r6, [pc, #56]	; (8001b10 <sbrk_aligned+0x3c>)
 8001ad8:	460c      	mov	r4, r1
 8001ada:	6831      	ldr	r1, [r6, #0]
 8001adc:	4605      	mov	r5, r0
 8001ade:	b911      	cbnz	r1, 8001ae6 <sbrk_aligned+0x12>
 8001ae0:	f000 fbaa 	bl	8002238 <_sbrk_r>
 8001ae4:	6030      	str	r0, [r6, #0]
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f000 fba5 	bl	8002238 <_sbrk_r>
 8001aee:	1c43      	adds	r3, r0, #1
 8001af0:	d00a      	beq.n	8001b08 <sbrk_aligned+0x34>
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d007      	beq.n	8001b0c <sbrk_aligned+0x38>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 fb9a 	bl	8002238 <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d101      	bne.n	8001b0c <sbrk_aligned+0x38>
 8001b08:	f04f 34ff 	mov.w	r4, #4294967295
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	20000214 	.word	0x20000214

08001b14 <_malloc_r>:
 8001b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b18:	1ccd      	adds	r5, r1, #3
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	4607      	mov	r7, r0
 8001b2a:	db01      	blt.n	8001b30 <_malloc_r+0x1c>
 8001b2c:	42a9      	cmp	r1, r5
 8001b2e:	d905      	bls.n	8001b3c <_malloc_r+0x28>
 8001b30:	230c      	movs	r3, #12
 8001b32:	2600      	movs	r6, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4630      	mov	r0, r6
 8001b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001c10 <_malloc_r+0xfc>
 8001b40:	f000 f868 	bl	8001c14 <__malloc_lock>
 8001b44:	f8d8 3000 	ldr.w	r3, [r8]
 8001b48:	461c      	mov	r4, r3
 8001b4a:	bb5c      	cbnz	r4, 8001ba4 <_malloc_r+0x90>
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	4638      	mov	r0, r7
 8001b50:	f7ff ffc0 	bl	8001ad4 <sbrk_aligned>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	4604      	mov	r4, r0
 8001b58:	d155      	bne.n	8001c06 <_malloc_r+0xf2>
 8001b5a:	f8d8 4000 	ldr.w	r4, [r8]
 8001b5e:	4626      	mov	r6, r4
 8001b60:	2e00      	cmp	r6, #0
 8001b62:	d145      	bne.n	8001bf0 <_malloc_r+0xdc>
 8001b64:	2c00      	cmp	r4, #0
 8001b66:	d048      	beq.n	8001bfa <_malloc_r+0xe6>
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	4631      	mov	r1, r6
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	eb04 0903 	add.w	r9, r4, r3
 8001b72:	f000 fb61 	bl	8002238 <_sbrk_r>
 8001b76:	4581      	cmp	r9, r0
 8001b78:	d13f      	bne.n	8001bfa <_malloc_r+0xe6>
 8001b7a:	6821      	ldr	r1, [r4, #0]
 8001b7c:	4638      	mov	r0, r7
 8001b7e:	1a6d      	subs	r5, r5, r1
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7ff ffa7 	bl	8001ad4 <sbrk_aligned>
 8001b86:	3001      	adds	r0, #1
 8001b88:	d037      	beq.n	8001bfa <_malloc_r+0xe6>
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	442b      	add	r3, r5
 8001b8e:	6023      	str	r3, [r4, #0]
 8001b90:	f8d8 3000 	ldr.w	r3, [r8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d038      	beq.n	8001c0a <_malloc_r+0xf6>
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	42a2      	cmp	r2, r4
 8001b9c:	d12b      	bne.n	8001bf6 <_malloc_r+0xe2>
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e00f      	b.n	8001bc4 <_malloc_r+0xb0>
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	1b52      	subs	r2, r2, r5
 8001ba8:	d41f      	bmi.n	8001bea <_malloc_r+0xd6>
 8001baa:	2a0b      	cmp	r2, #11
 8001bac:	d917      	bls.n	8001bde <_malloc_r+0xca>
 8001bae:	1961      	adds	r1, r4, r5
 8001bb0:	42a3      	cmp	r3, r4
 8001bb2:	6025      	str	r5, [r4, #0]
 8001bb4:	bf18      	it	ne
 8001bb6:	6059      	strne	r1, [r3, #4]
 8001bb8:	6863      	ldr	r3, [r4, #4]
 8001bba:	bf08      	it	eq
 8001bbc:	f8c8 1000 	streq.w	r1, [r8]
 8001bc0:	5162      	str	r2, [r4, r5]
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	4638      	mov	r0, r7
 8001bc6:	f104 060b 	add.w	r6, r4, #11
 8001bca:	f000 f829 	bl	8001c20 <__malloc_unlock>
 8001bce:	f026 0607 	bic.w	r6, r6, #7
 8001bd2:	1d23      	adds	r3, r4, #4
 8001bd4:	1af2      	subs	r2, r6, r3
 8001bd6:	d0ae      	beq.n	8001b36 <_malloc_r+0x22>
 8001bd8:	1b9b      	subs	r3, r3, r6
 8001bda:	50a3      	str	r3, [r4, r2]
 8001bdc:	e7ab      	b.n	8001b36 <_malloc_r+0x22>
 8001bde:	42a3      	cmp	r3, r4
 8001be0:	6862      	ldr	r2, [r4, #4]
 8001be2:	d1dd      	bne.n	8001ba0 <_malloc_r+0x8c>
 8001be4:	f8c8 2000 	str.w	r2, [r8]
 8001be8:	e7ec      	b.n	8001bc4 <_malloc_r+0xb0>
 8001bea:	4623      	mov	r3, r4
 8001bec:	6864      	ldr	r4, [r4, #4]
 8001bee:	e7ac      	b.n	8001b4a <_malloc_r+0x36>
 8001bf0:	4634      	mov	r4, r6
 8001bf2:	6876      	ldr	r6, [r6, #4]
 8001bf4:	e7b4      	b.n	8001b60 <_malloc_r+0x4c>
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	e7cc      	b.n	8001b94 <_malloc_r+0x80>
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	f000 f80e 	bl	8001c20 <__malloc_unlock>
 8001c04:	e797      	b.n	8001b36 <_malloc_r+0x22>
 8001c06:	6025      	str	r5, [r4, #0]
 8001c08:	e7dc      	b.n	8001bc4 <_malloc_r+0xb0>
 8001c0a:	605b      	str	r3, [r3, #4]
 8001c0c:	deff      	udf	#255	; 0xff
 8001c0e:	bf00      	nop
 8001c10:	20000210 	.word	0x20000210

08001c14 <__malloc_lock>:
 8001c14:	4801      	ldr	r0, [pc, #4]	; (8001c1c <__malloc_lock+0x8>)
 8001c16:	f7ff bf13 	b.w	8001a40 <__retarget_lock_acquire_recursive>
 8001c1a:	bf00      	nop
 8001c1c:	2000020c 	.word	0x2000020c

08001c20 <__malloc_unlock>:
 8001c20:	4801      	ldr	r0, [pc, #4]	; (8001c28 <__malloc_unlock+0x8>)
 8001c22:	f7ff bf0e 	b.w	8001a42 <__retarget_lock_release_recursive>
 8001c26:	bf00      	nop
 8001c28:	2000020c 	.word	0x2000020c

08001c2c <__ssputs_r>:
 8001c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c30:	461f      	mov	r7, r3
 8001c32:	688e      	ldr	r6, [r1, #8]
 8001c34:	4682      	mov	sl, r0
 8001c36:	42be      	cmp	r6, r7
 8001c38:	460c      	mov	r4, r1
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	680b      	ldr	r3, [r1, #0]
 8001c3e:	d82c      	bhi.n	8001c9a <__ssputs_r+0x6e>
 8001c40:	898a      	ldrh	r2, [r1, #12]
 8001c42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c46:	d026      	beq.n	8001c96 <__ssputs_r+0x6a>
 8001c48:	6965      	ldr	r5, [r4, #20]
 8001c4a:	6909      	ldr	r1, [r1, #16]
 8001c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c50:	eba3 0901 	sub.w	r9, r3, r1
 8001c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c58:	1c7b      	adds	r3, r7, #1
 8001c5a:	444b      	add	r3, r9
 8001c5c:	106d      	asrs	r5, r5, #1
 8001c5e:	429d      	cmp	r5, r3
 8001c60:	bf38      	it	cc
 8001c62:	461d      	movcc	r5, r3
 8001c64:	0553      	lsls	r3, r2, #21
 8001c66:	d527      	bpl.n	8001cb8 <__ssputs_r+0x8c>
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f7ff ff53 	bl	8001b14 <_malloc_r>
 8001c6e:	4606      	mov	r6, r0
 8001c70:	b360      	cbz	r0, 8001ccc <__ssputs_r+0xa0>
 8001c72:	464a      	mov	r2, r9
 8001c74:	6921      	ldr	r1, [r4, #16]
 8001c76:	f000 fafd 	bl	8002274 <memcpy>
 8001c7a:	89a3      	ldrh	r3, [r4, #12]
 8001c7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	81a3      	strh	r3, [r4, #12]
 8001c86:	6126      	str	r6, [r4, #16]
 8001c88:	444e      	add	r6, r9
 8001c8a:	6026      	str	r6, [r4, #0]
 8001c8c:	463e      	mov	r6, r7
 8001c8e:	6165      	str	r5, [r4, #20]
 8001c90:	eba5 0509 	sub.w	r5, r5, r9
 8001c94:	60a5      	str	r5, [r4, #8]
 8001c96:	42be      	cmp	r6, r7
 8001c98:	d900      	bls.n	8001c9c <__ssputs_r+0x70>
 8001c9a:	463e      	mov	r6, r7
 8001c9c:	4632      	mov	r2, r6
 8001c9e:	4641      	mov	r1, r8
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	f000 faaf 	bl	8002204 <memmove>
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	68a3      	ldr	r3, [r4, #8]
 8001caa:	1b9b      	subs	r3, r3, r6
 8001cac:	60a3      	str	r3, [r4, #8]
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	4433      	add	r3, r6
 8001cb2:	6023      	str	r3, [r4, #0]
 8001cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb8:	462a      	mov	r2, r5
 8001cba:	f000 fae9 	bl	8002290 <_realloc_r>
 8001cbe:	4606      	mov	r6, r0
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d1e0      	bne.n	8001c86 <__ssputs_r+0x5a>
 8001cc4:	4650      	mov	r0, sl
 8001cc6:	6921      	ldr	r1, [r4, #16]
 8001cc8:	f7ff febc 	bl	8001a44 <_free_r>
 8001ccc:	230c      	movs	r3, #12
 8001cce:	f8ca 3000 	str.w	r3, [sl]
 8001cd2:	89a3      	ldrh	r3, [r4, #12]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cdc:	81a3      	strh	r3, [r4, #12]
 8001cde:	e7e9      	b.n	8001cb4 <__ssputs_r+0x88>

08001ce0 <_svfiprintf_r>:
 8001ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce4:	4698      	mov	r8, r3
 8001ce6:	898b      	ldrh	r3, [r1, #12]
 8001ce8:	4607      	mov	r7, r0
 8001cea:	061b      	lsls	r3, r3, #24
 8001cec:	460d      	mov	r5, r1
 8001cee:	4614      	mov	r4, r2
 8001cf0:	b09d      	sub	sp, #116	; 0x74
 8001cf2:	d50e      	bpl.n	8001d12 <_svfiprintf_r+0x32>
 8001cf4:	690b      	ldr	r3, [r1, #16]
 8001cf6:	b963      	cbnz	r3, 8001d12 <_svfiprintf_r+0x32>
 8001cf8:	2140      	movs	r1, #64	; 0x40
 8001cfa:	f7ff ff0b 	bl	8001b14 <_malloc_r>
 8001cfe:	6028      	str	r0, [r5, #0]
 8001d00:	6128      	str	r0, [r5, #16]
 8001d02:	b920      	cbnz	r0, 8001d0e <_svfiprintf_r+0x2e>
 8001d04:	230c      	movs	r3, #12
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	e0d0      	b.n	8001eb0 <_svfiprintf_r+0x1d0>
 8001d0e:	2340      	movs	r3, #64	; 0x40
 8001d10:	616b      	str	r3, [r5, #20]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9309      	str	r3, [sp, #36]	; 0x24
 8001d16:	2320      	movs	r3, #32
 8001d18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d1c:	2330      	movs	r3, #48	; 0x30
 8001d1e:	f04f 0901 	mov.w	r9, #1
 8001d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d26:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001ec8 <_svfiprintf_r+0x1e8>
 8001d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d2e:	4623      	mov	r3, r4
 8001d30:	469a      	mov	sl, r3
 8001d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d36:	b10a      	cbz	r2, 8001d3c <_svfiprintf_r+0x5c>
 8001d38:	2a25      	cmp	r2, #37	; 0x25
 8001d3a:	d1f9      	bne.n	8001d30 <_svfiprintf_r+0x50>
 8001d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8001d40:	d00b      	beq.n	8001d5a <_svfiprintf_r+0x7a>
 8001d42:	465b      	mov	r3, fp
 8001d44:	4622      	mov	r2, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	4638      	mov	r0, r7
 8001d4a:	f7ff ff6f 	bl	8001c2c <__ssputs_r>
 8001d4e:	3001      	adds	r0, #1
 8001d50:	f000 80a9 	beq.w	8001ea6 <_svfiprintf_r+0x1c6>
 8001d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d56:	445a      	add	r2, fp
 8001d58:	9209      	str	r2, [sp, #36]	; 0x24
 8001d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80a1 	beq.w	8001ea6 <_svfiprintf_r+0x1c6>
 8001d64:	2300      	movs	r3, #0
 8001d66:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d6e:	f10a 0a01 	add.w	sl, sl, #1
 8001d72:	9304      	str	r3, [sp, #16]
 8001d74:	9307      	str	r3, [sp, #28]
 8001d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8001d7c:	4654      	mov	r4, sl
 8001d7e:	2205      	movs	r2, #5
 8001d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d84:	4850      	ldr	r0, [pc, #320]	; (8001ec8 <_svfiprintf_r+0x1e8>)
 8001d86:	f000 fa67 	bl	8002258 <memchr>
 8001d8a:	9a04      	ldr	r2, [sp, #16]
 8001d8c:	b9d8      	cbnz	r0, 8001dc6 <_svfiprintf_r+0xe6>
 8001d8e:	06d0      	lsls	r0, r2, #27
 8001d90:	bf44      	itt	mi
 8001d92:	2320      	movmi	r3, #32
 8001d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d98:	0711      	lsls	r1, r2, #28
 8001d9a:	bf44      	itt	mi
 8001d9c:	232b      	movmi	r3, #43	; 0x2b
 8001d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001da2:	f89a 3000 	ldrb.w	r3, [sl]
 8001da6:	2b2a      	cmp	r3, #42	; 0x2a
 8001da8:	d015      	beq.n	8001dd6 <_svfiprintf_r+0xf6>
 8001daa:	4654      	mov	r4, sl
 8001dac:	2000      	movs	r0, #0
 8001dae:	f04f 0c0a 	mov.w	ip, #10
 8001db2:	9a07      	ldr	r2, [sp, #28]
 8001db4:	4621      	mov	r1, r4
 8001db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dba:	3b30      	subs	r3, #48	; 0x30
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d94d      	bls.n	8001e5c <_svfiprintf_r+0x17c>
 8001dc0:	b1b0      	cbz	r0, 8001df0 <_svfiprintf_r+0x110>
 8001dc2:	9207      	str	r2, [sp, #28]
 8001dc4:	e014      	b.n	8001df0 <_svfiprintf_r+0x110>
 8001dc6:	eba0 0308 	sub.w	r3, r0, r8
 8001dca:	fa09 f303 	lsl.w	r3, r9, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	46a2      	mov	sl, r4
 8001dd2:	9304      	str	r3, [sp, #16]
 8001dd4:	e7d2      	b.n	8001d7c <_svfiprintf_r+0x9c>
 8001dd6:	9b03      	ldr	r3, [sp, #12]
 8001dd8:	1d19      	adds	r1, r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	9103      	str	r1, [sp, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bfbb      	ittet	lt
 8001de2:	425b      	neglt	r3, r3
 8001de4:	f042 0202 	orrlt.w	r2, r2, #2
 8001de8:	9307      	strge	r3, [sp, #28]
 8001dea:	9307      	strlt	r3, [sp, #28]
 8001dec:	bfb8      	it	lt
 8001dee:	9204      	strlt	r2, [sp, #16]
 8001df0:	7823      	ldrb	r3, [r4, #0]
 8001df2:	2b2e      	cmp	r3, #46	; 0x2e
 8001df4:	d10c      	bne.n	8001e10 <_svfiprintf_r+0x130>
 8001df6:	7863      	ldrb	r3, [r4, #1]
 8001df8:	2b2a      	cmp	r3, #42	; 0x2a
 8001dfa:	d134      	bne.n	8001e66 <_svfiprintf_r+0x186>
 8001dfc:	9b03      	ldr	r3, [sp, #12]
 8001dfe:	3402      	adds	r4, #2
 8001e00:	1d1a      	adds	r2, r3, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	9203      	str	r2, [sp, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e0e:	9305      	str	r3, [sp, #20]
 8001e10:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001ecc <_svfiprintf_r+0x1ec>
 8001e14:	2203      	movs	r2, #3
 8001e16:	4650      	mov	r0, sl
 8001e18:	7821      	ldrb	r1, [r4, #0]
 8001e1a:	f000 fa1d 	bl	8002258 <memchr>
 8001e1e:	b138      	cbz	r0, 8001e30 <_svfiprintf_r+0x150>
 8001e20:	2240      	movs	r2, #64	; 0x40
 8001e22:	9b04      	ldr	r3, [sp, #16]
 8001e24:	eba0 000a 	sub.w	r0, r0, sl
 8001e28:	4082      	lsls	r2, r0
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	3401      	adds	r4, #1
 8001e2e:	9304      	str	r3, [sp, #16]
 8001e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e34:	2206      	movs	r2, #6
 8001e36:	4826      	ldr	r0, [pc, #152]	; (8001ed0 <_svfiprintf_r+0x1f0>)
 8001e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e3c:	f000 fa0c 	bl	8002258 <memchr>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d038      	beq.n	8001eb6 <_svfiprintf_r+0x1d6>
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <_svfiprintf_r+0x1f4>)
 8001e46:	bb1b      	cbnz	r3, 8001e90 <_svfiprintf_r+0x1b0>
 8001e48:	9b03      	ldr	r3, [sp, #12]
 8001e4a:	3307      	adds	r3, #7
 8001e4c:	f023 0307 	bic.w	r3, r3, #7
 8001e50:	3308      	adds	r3, #8
 8001e52:	9303      	str	r3, [sp, #12]
 8001e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e56:	4433      	add	r3, r6
 8001e58:	9309      	str	r3, [sp, #36]	; 0x24
 8001e5a:	e768      	b.n	8001d2e <_svfiprintf_r+0x4e>
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	2001      	movs	r0, #1
 8001e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e64:	e7a6      	b.n	8001db4 <_svfiprintf_r+0xd4>
 8001e66:	2300      	movs	r3, #0
 8001e68:	f04f 0c0a 	mov.w	ip, #10
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	3401      	adds	r4, #1
 8001e70:	9305      	str	r3, [sp, #20]
 8001e72:	4620      	mov	r0, r4
 8001e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e78:	3a30      	subs	r2, #48	; 0x30
 8001e7a:	2a09      	cmp	r2, #9
 8001e7c:	d903      	bls.n	8001e86 <_svfiprintf_r+0x1a6>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0c6      	beq.n	8001e10 <_svfiprintf_r+0x130>
 8001e82:	9105      	str	r1, [sp, #20]
 8001e84:	e7c4      	b.n	8001e10 <_svfiprintf_r+0x130>
 8001e86:	4604      	mov	r4, r0
 8001e88:	2301      	movs	r3, #1
 8001e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e8e:	e7f0      	b.n	8001e72 <_svfiprintf_r+0x192>
 8001e90:	ab03      	add	r3, sp, #12
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	462a      	mov	r2, r5
 8001e96:	4638      	mov	r0, r7
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <_svfiprintf_r+0x1f8>)
 8001e9a:	a904      	add	r1, sp, #16
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	1c42      	adds	r2, r0, #1
 8001ea2:	4606      	mov	r6, r0
 8001ea4:	d1d6      	bne.n	8001e54 <_svfiprintf_r+0x174>
 8001ea6:	89ab      	ldrh	r3, [r5, #12]
 8001ea8:	065b      	lsls	r3, r3, #25
 8001eaa:	f53f af2d 	bmi.w	8001d08 <_svfiprintf_r+0x28>
 8001eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001eb0:	b01d      	add	sp, #116	; 0x74
 8001eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eb6:	ab03      	add	r3, sp, #12
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	462a      	mov	r2, r5
 8001ebc:	4638      	mov	r0, r7
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <_svfiprintf_r+0x1f8>)
 8001ec0:	a904      	add	r1, sp, #16
 8001ec2:	f000 f87d 	bl	8001fc0 <_printf_i>
 8001ec6:	e7eb      	b.n	8001ea0 <_svfiprintf_r+0x1c0>
 8001ec8:	0800235a 	.word	0x0800235a
 8001ecc:	08002360 	.word	0x08002360
 8001ed0:	08002364 	.word	0x08002364
 8001ed4:	00000000 	.word	0x00000000
 8001ed8:	08001c2d 	.word	0x08001c2d

08001edc <_printf_common>:
 8001edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ee0:	4616      	mov	r6, r2
 8001ee2:	4699      	mov	r9, r3
 8001ee4:	688a      	ldr	r2, [r1, #8]
 8001ee6:	690b      	ldr	r3, [r1, #16]
 8001ee8:	4607      	mov	r7, r0
 8001eea:	4293      	cmp	r3, r2
 8001eec:	bfb8      	it	lt
 8001eee:	4613      	movlt	r3, r2
 8001ef0:	6033      	str	r3, [r6, #0]
 8001ef2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001efc:	b10a      	cbz	r2, 8001f02 <_printf_common+0x26>
 8001efe:	3301      	adds	r3, #1
 8001f00:	6033      	str	r3, [r6, #0]
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	0699      	lsls	r1, r3, #26
 8001f06:	bf42      	ittt	mi
 8001f08:	6833      	ldrmi	r3, [r6, #0]
 8001f0a:	3302      	addmi	r3, #2
 8001f0c:	6033      	strmi	r3, [r6, #0]
 8001f0e:	6825      	ldr	r5, [r4, #0]
 8001f10:	f015 0506 	ands.w	r5, r5, #6
 8001f14:	d106      	bne.n	8001f24 <_printf_common+0x48>
 8001f16:	f104 0a19 	add.w	sl, r4, #25
 8001f1a:	68e3      	ldr	r3, [r4, #12]
 8001f1c:	6832      	ldr	r2, [r6, #0]
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	42ab      	cmp	r3, r5
 8001f22:	dc2b      	bgt.n	8001f7c <_printf_common+0xa0>
 8001f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f28:	1e13      	subs	r3, r2, #0
 8001f2a:	6822      	ldr	r2, [r4, #0]
 8001f2c:	bf18      	it	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	0692      	lsls	r2, r2, #26
 8001f32:	d430      	bmi.n	8001f96 <_printf_common+0xba>
 8001f34:	4649      	mov	r1, r9
 8001f36:	4638      	mov	r0, r7
 8001f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f3c:	47c0      	blx	r8
 8001f3e:	3001      	adds	r0, #1
 8001f40:	d023      	beq.n	8001f8a <_printf_common+0xae>
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	6922      	ldr	r2, [r4, #16]
 8001f46:	f003 0306 	and.w	r3, r3, #6
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf14      	ite	ne
 8001f4e:	2500      	movne	r5, #0
 8001f50:	6833      	ldreq	r3, [r6, #0]
 8001f52:	f04f 0600 	mov.w	r6, #0
 8001f56:	bf08      	it	eq
 8001f58:	68e5      	ldreq	r5, [r4, #12]
 8001f5a:	f104 041a 	add.w	r4, r4, #26
 8001f5e:	bf08      	it	eq
 8001f60:	1aed      	subeq	r5, r5, r3
 8001f62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001f66:	bf08      	it	eq
 8001f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	bfc4      	itt	gt
 8001f70:	1a9b      	subgt	r3, r3, r2
 8001f72:	18ed      	addgt	r5, r5, r3
 8001f74:	42b5      	cmp	r5, r6
 8001f76:	d11a      	bne.n	8001fae <_printf_common+0xd2>
 8001f78:	2000      	movs	r0, #0
 8001f7a:	e008      	b.n	8001f8e <_printf_common+0xb2>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	4652      	mov	r2, sl
 8001f80:	4649      	mov	r1, r9
 8001f82:	4638      	mov	r0, r7
 8001f84:	47c0      	blx	r8
 8001f86:	3001      	adds	r0, #1
 8001f88:	d103      	bne.n	8001f92 <_printf_common+0xb6>
 8001f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f92:	3501      	adds	r5, #1
 8001f94:	e7c1      	b.n	8001f1a <_printf_common+0x3e>
 8001f96:	2030      	movs	r0, #48	; 0x30
 8001f98:	18e1      	adds	r1, r4, r3
 8001f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fa4:	4422      	add	r2, r4
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001fac:	e7c2      	b.n	8001f34 <_printf_common+0x58>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	4649      	mov	r1, r9
 8001fb4:	4638      	mov	r0, r7
 8001fb6:	47c0      	blx	r8
 8001fb8:	3001      	adds	r0, #1
 8001fba:	d0e6      	beq.n	8001f8a <_printf_common+0xae>
 8001fbc:	3601      	adds	r6, #1
 8001fbe:	e7d9      	b.n	8001f74 <_printf_common+0x98>

08001fc0 <_printf_i>:
 8001fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc4:	7e0f      	ldrb	r7, [r1, #24]
 8001fc6:	4691      	mov	r9, r2
 8001fc8:	2f78      	cmp	r7, #120	; 0x78
 8001fca:	4680      	mov	r8, r0
 8001fcc:	460c      	mov	r4, r1
 8001fce:	469a      	mov	sl, r3
 8001fd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001fd6:	d807      	bhi.n	8001fe8 <_printf_i+0x28>
 8001fd8:	2f62      	cmp	r7, #98	; 0x62
 8001fda:	d80a      	bhi.n	8001ff2 <_printf_i+0x32>
 8001fdc:	2f00      	cmp	r7, #0
 8001fde:	f000 80d5 	beq.w	800218c <_printf_i+0x1cc>
 8001fe2:	2f58      	cmp	r7, #88	; 0x58
 8001fe4:	f000 80c1 	beq.w	800216a <_printf_i+0x1aa>
 8001fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ff0:	e03a      	b.n	8002068 <_printf_i+0xa8>
 8001ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ff6:	2b15      	cmp	r3, #21
 8001ff8:	d8f6      	bhi.n	8001fe8 <_printf_i+0x28>
 8001ffa:	a101      	add	r1, pc, #4	; (adr r1, 8002000 <_printf_i+0x40>)
 8001ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002000:	08002059 	.word	0x08002059
 8002004:	0800206d 	.word	0x0800206d
 8002008:	08001fe9 	.word	0x08001fe9
 800200c:	08001fe9 	.word	0x08001fe9
 8002010:	08001fe9 	.word	0x08001fe9
 8002014:	08001fe9 	.word	0x08001fe9
 8002018:	0800206d 	.word	0x0800206d
 800201c:	08001fe9 	.word	0x08001fe9
 8002020:	08001fe9 	.word	0x08001fe9
 8002024:	08001fe9 	.word	0x08001fe9
 8002028:	08001fe9 	.word	0x08001fe9
 800202c:	08002173 	.word	0x08002173
 8002030:	08002099 	.word	0x08002099
 8002034:	0800212d 	.word	0x0800212d
 8002038:	08001fe9 	.word	0x08001fe9
 800203c:	08001fe9 	.word	0x08001fe9
 8002040:	08002195 	.word	0x08002195
 8002044:	08001fe9 	.word	0x08001fe9
 8002048:	08002099 	.word	0x08002099
 800204c:	08001fe9 	.word	0x08001fe9
 8002050:	08001fe9 	.word	0x08001fe9
 8002054:	08002135 	.word	0x08002135
 8002058:	682b      	ldr	r3, [r5, #0]
 800205a:	1d1a      	adds	r2, r3, #4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	602a      	str	r2, [r5, #0]
 8002060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002068:	2301      	movs	r3, #1
 800206a:	e0a0      	b.n	80021ae <_printf_i+0x1ee>
 800206c:	6820      	ldr	r0, [r4, #0]
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	0607      	lsls	r7, r0, #24
 8002072:	f103 0104 	add.w	r1, r3, #4
 8002076:	6029      	str	r1, [r5, #0]
 8002078:	d501      	bpl.n	800207e <_printf_i+0xbe>
 800207a:	681e      	ldr	r6, [r3, #0]
 800207c:	e003      	b.n	8002086 <_printf_i+0xc6>
 800207e:	0646      	lsls	r6, r0, #25
 8002080:	d5fb      	bpl.n	800207a <_printf_i+0xba>
 8002082:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002086:	2e00      	cmp	r6, #0
 8002088:	da03      	bge.n	8002092 <_printf_i+0xd2>
 800208a:	232d      	movs	r3, #45	; 0x2d
 800208c:	4276      	negs	r6, r6
 800208e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002092:	230a      	movs	r3, #10
 8002094:	4859      	ldr	r0, [pc, #356]	; (80021fc <_printf_i+0x23c>)
 8002096:	e012      	b.n	80020be <_printf_i+0xfe>
 8002098:	682b      	ldr	r3, [r5, #0]
 800209a:	6820      	ldr	r0, [r4, #0]
 800209c:	1d19      	adds	r1, r3, #4
 800209e:	6029      	str	r1, [r5, #0]
 80020a0:	0605      	lsls	r5, r0, #24
 80020a2:	d501      	bpl.n	80020a8 <_printf_i+0xe8>
 80020a4:	681e      	ldr	r6, [r3, #0]
 80020a6:	e002      	b.n	80020ae <_printf_i+0xee>
 80020a8:	0641      	lsls	r1, r0, #25
 80020aa:	d5fb      	bpl.n	80020a4 <_printf_i+0xe4>
 80020ac:	881e      	ldrh	r6, [r3, #0]
 80020ae:	2f6f      	cmp	r7, #111	; 0x6f
 80020b0:	bf0c      	ite	eq
 80020b2:	2308      	moveq	r3, #8
 80020b4:	230a      	movne	r3, #10
 80020b6:	4851      	ldr	r0, [pc, #324]	; (80021fc <_printf_i+0x23c>)
 80020b8:	2100      	movs	r1, #0
 80020ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020be:	6865      	ldr	r5, [r4, #4]
 80020c0:	2d00      	cmp	r5, #0
 80020c2:	bfa8      	it	ge
 80020c4:	6821      	ldrge	r1, [r4, #0]
 80020c6:	60a5      	str	r5, [r4, #8]
 80020c8:	bfa4      	itt	ge
 80020ca:	f021 0104 	bicge.w	r1, r1, #4
 80020ce:	6021      	strge	r1, [r4, #0]
 80020d0:	b90e      	cbnz	r6, 80020d6 <_printf_i+0x116>
 80020d2:	2d00      	cmp	r5, #0
 80020d4:	d04b      	beq.n	800216e <_printf_i+0x1ae>
 80020d6:	4615      	mov	r5, r2
 80020d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80020dc:	fb03 6711 	mls	r7, r3, r1, r6
 80020e0:	5dc7      	ldrb	r7, [r0, r7]
 80020e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80020e6:	4637      	mov	r7, r6
 80020e8:	42bb      	cmp	r3, r7
 80020ea:	460e      	mov	r6, r1
 80020ec:	d9f4      	bls.n	80020d8 <_printf_i+0x118>
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d10b      	bne.n	800210a <_printf_i+0x14a>
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	07de      	lsls	r6, r3, #31
 80020f6:	d508      	bpl.n	800210a <_printf_i+0x14a>
 80020f8:	6923      	ldr	r3, [r4, #16]
 80020fa:	6861      	ldr	r1, [r4, #4]
 80020fc:	4299      	cmp	r1, r3
 80020fe:	bfde      	ittt	le
 8002100:	2330      	movle	r3, #48	; 0x30
 8002102:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002106:	f105 35ff 	addle.w	r5, r5, #4294967295
 800210a:	1b52      	subs	r2, r2, r5
 800210c:	6122      	str	r2, [r4, #16]
 800210e:	464b      	mov	r3, r9
 8002110:	4621      	mov	r1, r4
 8002112:	4640      	mov	r0, r8
 8002114:	f8cd a000 	str.w	sl, [sp]
 8002118:	aa03      	add	r2, sp, #12
 800211a:	f7ff fedf 	bl	8001edc <_printf_common>
 800211e:	3001      	adds	r0, #1
 8002120:	d14a      	bne.n	80021b8 <_printf_i+0x1f8>
 8002122:	f04f 30ff 	mov.w	r0, #4294967295
 8002126:	b004      	add	sp, #16
 8002128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	f043 0320 	orr.w	r3, r3, #32
 8002132:	6023      	str	r3, [r4, #0]
 8002134:	2778      	movs	r7, #120	; 0x78
 8002136:	4832      	ldr	r0, [pc, #200]	; (8002200 <_printf_i+0x240>)
 8002138:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	6829      	ldr	r1, [r5, #0]
 8002140:	061f      	lsls	r7, r3, #24
 8002142:	f851 6b04 	ldr.w	r6, [r1], #4
 8002146:	d402      	bmi.n	800214e <_printf_i+0x18e>
 8002148:	065f      	lsls	r7, r3, #25
 800214a:	bf48      	it	mi
 800214c:	b2b6      	uxthmi	r6, r6
 800214e:	07df      	lsls	r7, r3, #31
 8002150:	bf48      	it	mi
 8002152:	f043 0320 	orrmi.w	r3, r3, #32
 8002156:	6029      	str	r1, [r5, #0]
 8002158:	bf48      	it	mi
 800215a:	6023      	strmi	r3, [r4, #0]
 800215c:	b91e      	cbnz	r6, 8002166 <_printf_i+0x1a6>
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f023 0320 	bic.w	r3, r3, #32
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	2310      	movs	r3, #16
 8002168:	e7a6      	b.n	80020b8 <_printf_i+0xf8>
 800216a:	4824      	ldr	r0, [pc, #144]	; (80021fc <_printf_i+0x23c>)
 800216c:	e7e4      	b.n	8002138 <_printf_i+0x178>
 800216e:	4615      	mov	r5, r2
 8002170:	e7bd      	b.n	80020ee <_printf_i+0x12e>
 8002172:	682b      	ldr	r3, [r5, #0]
 8002174:	6826      	ldr	r6, [r4, #0]
 8002176:	1d18      	adds	r0, r3, #4
 8002178:	6961      	ldr	r1, [r4, #20]
 800217a:	6028      	str	r0, [r5, #0]
 800217c:	0635      	lsls	r5, r6, #24
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	d501      	bpl.n	8002186 <_printf_i+0x1c6>
 8002182:	6019      	str	r1, [r3, #0]
 8002184:	e002      	b.n	800218c <_printf_i+0x1cc>
 8002186:	0670      	lsls	r0, r6, #25
 8002188:	d5fb      	bpl.n	8002182 <_printf_i+0x1c2>
 800218a:	8019      	strh	r1, [r3, #0]
 800218c:	2300      	movs	r3, #0
 800218e:	4615      	mov	r5, r2
 8002190:	6123      	str	r3, [r4, #16]
 8002192:	e7bc      	b.n	800210e <_printf_i+0x14e>
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	2100      	movs	r1, #0
 8002198:	1d1a      	adds	r2, r3, #4
 800219a:	602a      	str	r2, [r5, #0]
 800219c:	681d      	ldr	r5, [r3, #0]
 800219e:	6862      	ldr	r2, [r4, #4]
 80021a0:	4628      	mov	r0, r5
 80021a2:	f000 f859 	bl	8002258 <memchr>
 80021a6:	b108      	cbz	r0, 80021ac <_printf_i+0x1ec>
 80021a8:	1b40      	subs	r0, r0, r5
 80021aa:	6060      	str	r0, [r4, #4]
 80021ac:	6863      	ldr	r3, [r4, #4]
 80021ae:	6123      	str	r3, [r4, #16]
 80021b0:	2300      	movs	r3, #0
 80021b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021b6:	e7aa      	b.n	800210e <_printf_i+0x14e>
 80021b8:	462a      	mov	r2, r5
 80021ba:	4649      	mov	r1, r9
 80021bc:	4640      	mov	r0, r8
 80021be:	6923      	ldr	r3, [r4, #16]
 80021c0:	47d0      	blx	sl
 80021c2:	3001      	adds	r0, #1
 80021c4:	d0ad      	beq.n	8002122 <_printf_i+0x162>
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	079b      	lsls	r3, r3, #30
 80021ca:	d413      	bmi.n	80021f4 <_printf_i+0x234>
 80021cc:	68e0      	ldr	r0, [r4, #12]
 80021ce:	9b03      	ldr	r3, [sp, #12]
 80021d0:	4298      	cmp	r0, r3
 80021d2:	bfb8      	it	lt
 80021d4:	4618      	movlt	r0, r3
 80021d6:	e7a6      	b.n	8002126 <_printf_i+0x166>
 80021d8:	2301      	movs	r3, #1
 80021da:	4632      	mov	r2, r6
 80021dc:	4649      	mov	r1, r9
 80021de:	4640      	mov	r0, r8
 80021e0:	47d0      	blx	sl
 80021e2:	3001      	adds	r0, #1
 80021e4:	d09d      	beq.n	8002122 <_printf_i+0x162>
 80021e6:	3501      	adds	r5, #1
 80021e8:	68e3      	ldr	r3, [r4, #12]
 80021ea:	9903      	ldr	r1, [sp, #12]
 80021ec:	1a5b      	subs	r3, r3, r1
 80021ee:	42ab      	cmp	r3, r5
 80021f0:	dcf2      	bgt.n	80021d8 <_printf_i+0x218>
 80021f2:	e7eb      	b.n	80021cc <_printf_i+0x20c>
 80021f4:	2500      	movs	r5, #0
 80021f6:	f104 0619 	add.w	r6, r4, #25
 80021fa:	e7f5      	b.n	80021e8 <_printf_i+0x228>
 80021fc:	0800236b 	.word	0x0800236b
 8002200:	0800237c 	.word	0x0800237c

08002204 <memmove>:
 8002204:	4288      	cmp	r0, r1
 8002206:	b510      	push	{r4, lr}
 8002208:	eb01 0402 	add.w	r4, r1, r2
 800220c:	d902      	bls.n	8002214 <memmove+0x10>
 800220e:	4284      	cmp	r4, r0
 8002210:	4623      	mov	r3, r4
 8002212:	d807      	bhi.n	8002224 <memmove+0x20>
 8002214:	1e43      	subs	r3, r0, #1
 8002216:	42a1      	cmp	r1, r4
 8002218:	d008      	beq.n	800222c <memmove+0x28>
 800221a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800221e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002222:	e7f8      	b.n	8002216 <memmove+0x12>
 8002224:	4601      	mov	r1, r0
 8002226:	4402      	add	r2, r0
 8002228:	428a      	cmp	r2, r1
 800222a:	d100      	bne.n	800222e <memmove+0x2a>
 800222c:	bd10      	pop	{r4, pc}
 800222e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002236:	e7f7      	b.n	8002228 <memmove+0x24>

08002238 <_sbrk_r>:
 8002238:	b538      	push	{r3, r4, r5, lr}
 800223a:	2300      	movs	r3, #0
 800223c:	4d05      	ldr	r5, [pc, #20]	; (8002254 <_sbrk_r+0x1c>)
 800223e:	4604      	mov	r4, r0
 8002240:	4608      	mov	r0, r1
 8002242:	602b      	str	r3, [r5, #0]
 8002244:	f7fe f912 	bl	800046c <_sbrk>
 8002248:	1c43      	adds	r3, r0, #1
 800224a:	d102      	bne.n	8002252 <_sbrk_r+0x1a>
 800224c:	682b      	ldr	r3, [r5, #0]
 800224e:	b103      	cbz	r3, 8002252 <_sbrk_r+0x1a>
 8002250:	6023      	str	r3, [r4, #0]
 8002252:	bd38      	pop	{r3, r4, r5, pc}
 8002254:	20000208 	.word	0x20000208

08002258 <memchr>:
 8002258:	4603      	mov	r3, r0
 800225a:	b510      	push	{r4, lr}
 800225c:	b2c9      	uxtb	r1, r1
 800225e:	4402      	add	r2, r0
 8002260:	4293      	cmp	r3, r2
 8002262:	4618      	mov	r0, r3
 8002264:	d101      	bne.n	800226a <memchr+0x12>
 8002266:	2000      	movs	r0, #0
 8002268:	e003      	b.n	8002272 <memchr+0x1a>
 800226a:	7804      	ldrb	r4, [r0, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	428c      	cmp	r4, r1
 8002270:	d1f6      	bne.n	8002260 <memchr+0x8>
 8002272:	bd10      	pop	{r4, pc}

08002274 <memcpy>:
 8002274:	440a      	add	r2, r1
 8002276:	4291      	cmp	r1, r2
 8002278:	f100 33ff 	add.w	r3, r0, #4294967295
 800227c:	d100      	bne.n	8002280 <memcpy+0xc>
 800227e:	4770      	bx	lr
 8002280:	b510      	push	{r4, lr}
 8002282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002286:	4291      	cmp	r1, r2
 8002288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800228c:	d1f9      	bne.n	8002282 <memcpy+0xe>
 800228e:	bd10      	pop	{r4, pc}

08002290 <_realloc_r>:
 8002290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002294:	4680      	mov	r8, r0
 8002296:	4614      	mov	r4, r2
 8002298:	460e      	mov	r6, r1
 800229a:	b921      	cbnz	r1, 80022a6 <_realloc_r+0x16>
 800229c:	4611      	mov	r1, r2
 800229e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022a2:	f7ff bc37 	b.w	8001b14 <_malloc_r>
 80022a6:	b92a      	cbnz	r2, 80022b4 <_realloc_r+0x24>
 80022a8:	f7ff fbcc 	bl	8001a44 <_free_r>
 80022ac:	4625      	mov	r5, r4
 80022ae:	4628      	mov	r0, r5
 80022b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022b4:	f000 f81b 	bl	80022ee <_malloc_usable_size_r>
 80022b8:	4284      	cmp	r4, r0
 80022ba:	4607      	mov	r7, r0
 80022bc:	d802      	bhi.n	80022c4 <_realloc_r+0x34>
 80022be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80022c2:	d812      	bhi.n	80022ea <_realloc_r+0x5a>
 80022c4:	4621      	mov	r1, r4
 80022c6:	4640      	mov	r0, r8
 80022c8:	f7ff fc24 	bl	8001b14 <_malloc_r>
 80022cc:	4605      	mov	r5, r0
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d0ed      	beq.n	80022ae <_realloc_r+0x1e>
 80022d2:	42bc      	cmp	r4, r7
 80022d4:	4622      	mov	r2, r4
 80022d6:	4631      	mov	r1, r6
 80022d8:	bf28      	it	cs
 80022da:	463a      	movcs	r2, r7
 80022dc:	f7ff ffca 	bl	8002274 <memcpy>
 80022e0:	4631      	mov	r1, r6
 80022e2:	4640      	mov	r0, r8
 80022e4:	f7ff fbae 	bl	8001a44 <_free_r>
 80022e8:	e7e1      	b.n	80022ae <_realloc_r+0x1e>
 80022ea:	4635      	mov	r5, r6
 80022ec:	e7df      	b.n	80022ae <_realloc_r+0x1e>

080022ee <_malloc_usable_size_r>:
 80022ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022f2:	1f18      	subs	r0, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bfbc      	itt	lt
 80022f8:	580b      	ldrlt	r3, [r1, r0]
 80022fa:	18c0      	addlt	r0, r0, r3
 80022fc:	4770      	bx	lr
	...

08002300 <_init>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr

0800230c <_fini>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr
