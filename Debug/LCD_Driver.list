
LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e0  080020e0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080020e0  080020e0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020e0  080020e0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080020e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000007c  08002164  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08002164  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000035c1  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001200  00000000  00000000  000236a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004b0  00000000  00000000  000248b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000353  00000000  00000000  00024d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170db  00000000  00000000  000250b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000671f  00000000  00000000  0003c18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fe70  00000000  00000000  000428ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000156c  00000000  00000000  000c2720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000c3c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800204c 	.word	0x0800204c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	0800204c 	.word	0x0800204c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbdb 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f877 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8b1 	bl	80002c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Alcd_Init(& lcd1, 2, 0);
 800015e:	2200      	movs	r2, #0
 8000160:	2102      	movs	r1, #2
 8000162:	4834      	ldr	r0, [pc, #208]	; (8000234 <main+0xe8>)
 8000164:	f000 faaa 	bl	80006bc <Alcd_Init>
  Alcd_PutAt_n(&lcd1, 1, 0, "Youstina", 8);
 8000168:	2308      	movs	r3, #8
 800016a:	9300      	str	r3, [sp, #0]
 800016c:	4b32      	ldr	r3, [pc, #200]	; (8000238 <main+0xec>)
 800016e:	2200      	movs	r2, #0
 8000170:	2101      	movs	r1, #1
 8000172:	4830      	ldr	r0, [pc, #192]	; (8000234 <main+0xe8>)
 8000174:	f000 fb5d 	bl	8000832 <Alcd_PutAt_n>
  HAL_Delay(3000);
 8000178:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800017c:	f000 fc28 	bl	80009d0 <HAL_Delay>
  HAL_Delay(3000);
 8000180:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000184:	f000 fc24 	bl	80009d0 <HAL_Delay>
  Alcd_Clear(&lcd1);
 8000188:	482a      	ldr	r0, [pc, #168]	; (8000234 <main+0xe8>)
 800018a:	f000 fb6b 	bl	8000864 <Alcd_Clear>
  uint8_t HH=0;
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
  uint8_t MM=0;
 8000192:	2300      	movs	r3, #0
 8000194:	71bb      	strb	r3, [r7, #6]
  uint8_t SS=0;
 8000196:	2300      	movs	r3, #0
 8000198:	717b      	strb	r3, [r7, #5]
  uint8_t length =sprintf(stringaya, "%d%d%d", HH, MM, SS);
 800019a:	79fa      	ldrb	r2, [r7, #7]
 800019c:	79b9      	ldrb	r1, [r7, #6]
 800019e:	797b      	ldrb	r3, [r7, #5]
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	460b      	mov	r3, r1
 80001a4:	4925      	ldr	r1, [pc, #148]	; (800023c <main+0xf0>)
 80001a6:	4826      	ldr	r0, [pc, #152]	; (8000240 <main+0xf4>)
 80001a8:	f001 fa9e 	bl	80016e8 <siprintf>
 80001ac:	4603      	mov	r3, r0
 80001ae:	713b      	strb	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(SS>=0 && SS<59)
 80001b0:	797b      	ldrb	r3, [r7, #5]
 80001b2:	2b3a      	cmp	r3, #58	; 0x3a
 80001b4:	d802      	bhi.n	80001bc <main+0x70>
	  {
		  SS++;
 80001b6:	797b      	ldrb	r3, [r7, #5]
 80001b8:	3301      	adds	r3, #1
 80001ba:	717b      	strb	r3, [r7, #5]
	  }
	  if(SS==59)
 80001bc:	797b      	ldrb	r3, [r7, #5]
 80001be:	2b3b      	cmp	r3, #59	; 0x3b
 80001c0:	d104      	bne.n	80001cc <main+0x80>
	  {
		 MM++;
 80001c2:	79bb      	ldrb	r3, [r7, #6]
 80001c4:	3301      	adds	r3, #1
 80001c6:	71bb      	strb	r3, [r7, #6]
		 SS=0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	717b      	strb	r3, [r7, #5]
	  }
	  if(MM==59)
 80001cc:	79bb      	ldrb	r3, [r7, #6]
 80001ce:	2b3b      	cmp	r3, #59	; 0x3b
 80001d0:	d104      	bne.n	80001dc <main+0x90>
	  {

		  HH++;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	3301      	adds	r3, #1
 80001d6:	71fb      	strb	r3, [r7, #7]
			  MM=0;
 80001d8:	2300      	movs	r3, #0
 80001da:	71bb      	strb	r3, [r7, #6]
	  }
	  if(HH==59 && MM==59 && SS==59)
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	2b3b      	cmp	r3, #59	; 0x3b
 80001e0:	d107      	bne.n	80001f2 <main+0xa6>
 80001e2:	79bb      	ldrb	r3, [r7, #6]
 80001e4:	2b3b      	cmp	r3, #59	; 0x3b
 80001e6:	d104      	bne.n	80001f2 <main+0xa6>
 80001e8:	797b      	ldrb	r3, [r7, #5]
 80001ea:	2b3b      	cmp	r3, #59	; 0x3b
 80001ec:	d101      	bne.n	80001f2 <main+0xa6>
	  {
		  HH=0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71fb      	strb	r3, [r7, #7]
	  }
	  HAL_Delay(1000);
 80001f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f6:	f000 fbeb 	bl	80009d0 <HAL_Delay>
	  sprintf(stringaya, "%02d:%02d:%02d", HH, MM, SS);
 80001fa:	79fa      	ldrb	r2, [r7, #7]
 80001fc:	79b9      	ldrb	r1, [r7, #6]
 80001fe:	797b      	ldrb	r3, [r7, #5]
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	460b      	mov	r3, r1
 8000204:	490f      	ldr	r1, [pc, #60]	; (8000244 <main+0xf8>)
 8000206:	480e      	ldr	r0, [pc, #56]	; (8000240 <main+0xf4>)
 8000208:	f001 fa6e 	bl	80016e8 <siprintf>
	  length =sprintf(stringaya, "%02d:%02d:%02d", HH, MM, SS);
 800020c:	79fa      	ldrb	r2, [r7, #7]
 800020e:	79b9      	ldrb	r1, [r7, #6]
 8000210:	797b      	ldrb	r3, [r7, #5]
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	460b      	mov	r3, r1
 8000216:	490b      	ldr	r1, [pc, #44]	; (8000244 <main+0xf8>)
 8000218:	4809      	ldr	r0, [pc, #36]	; (8000240 <main+0xf4>)
 800021a:	f001 fa65 	bl	80016e8 <siprintf>
 800021e:	4603      	mov	r3, r0
 8000220:	713b      	strb	r3, [r7, #4]
	  Alcd_PutAt_n(&lcd1,0, 0, stringaya, length);
 8000222:	793b      	ldrb	r3, [r7, #4]
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <main+0xf4>)
 8000228:	2200      	movs	r2, #0
 800022a:	2100      	movs	r1, #0
 800022c:	4801      	ldr	r0, [pc, #4]	; (8000234 <main+0xe8>)
 800022e:	f000 fb00 	bl	8000832 <Alcd_PutAt_n>
	  if(SS>=0 && SS<59)
 8000232:	e7bd      	b.n	80001b0 <main+0x64>
 8000234:	20000000 	.word	0x20000000
 8000238:	08002064 	.word	0x08002064
 800023c:	08002070 	.word	0x08002070
 8000240:	20000098 	.word	0x20000098
 8000244:	08002078 	.word	0x08002078

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fa66 	bl	8001728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000276:	2300      	movs	r3, #0
 8000278:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fe4a 	bl	8000f18 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800028a:	f000 f83b 	bl	8000304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 f8b8 	bl	800141c <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b2:	f000 f827 	bl	8000304 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	; 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_GPIO_Init+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <MX_GPIO_Init+0x40>)
 80002cc:	f043 0320 	orr.w	r3, r3, #32
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_GPIO_Init+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0320 	and.w	r3, r3, #32
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_GPIO_Init+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a07      	ldr	r2, [pc, #28]	; (8000300 <MX_GPIO_Init+0x40>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <MX_GPIO_Init+0x40>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0304 	and.w	r3, r3, #4
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000

08000304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000308:	b672      	cpsid	i
}
 800030a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030c:	e7fe      	b.n	800030c <Error_Handler+0x8>
	...

08000310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <HAL_MspInit+0x5c>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a14      	ldr	r2, [pc, #80]	; (800036c <HAL_MspInit+0x5c>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <HAL_MspInit+0x5c>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <HAL_MspInit+0x5c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <HAL_MspInit+0x5c>)
 8000334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000338:	61d3      	str	r3, [r2, #28]
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <HAL_MspInit+0x5c>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <HAL_MspInit+0x60>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <HAL_MspInit+0x60>)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000
 8000370:	40010000 	.word	0x40010000

08000374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <NMI_Handler+0x4>

0800037a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <HardFault_Handler+0x4>

08000380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <MemManage_Handler+0x4>

08000386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800038a:	e7fe      	b.n	800038a <BusFault_Handler+0x4>

0800038c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <UsageFault_Handler+0x4>

08000392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr

080003b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ba:	f000 faed 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <_sbrk+0x5c>)
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <_sbrk+0x60>)
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <_sbrk+0x64>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <_sbrk+0x64>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <_sbrk+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <_sbrk+0x64>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d207      	bcs.n	8000404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f4:	f001 f9a0 	bl	8001738 <__errno>
 80003f8:	4603      	mov	r3, r0
 80003fa:	220c      	movs	r2, #12
 80003fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000402:	e009      	b.n	8000418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <_sbrk+0x64>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	4a05      	ldr	r2, [pc, #20]	; (8000428 <_sbrk+0x64>)
 8000414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000416:	68fb      	ldr	r3, [r7, #12]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20005000 	.word	0x20005000
 8000424:	00000400 	.word	0x00000400
 8000428:	200000a4 	.word	0x200000a4
 800042c:	200001f8 	.word	0x200001f8

08000430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800043c:	f7ff fff8 	bl	8000430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480b      	ldr	r0, [pc, #44]	; (8000470 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000442:	490c      	ldr	r1, [pc, #48]	; (8000474 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000444:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a09      	ldr	r2, [pc, #36]	; (800047c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000458:	4c09      	ldr	r4, [pc, #36]	; (8000480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000466:	f001 f96d 	bl	8001744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff fe6f 	bl	800014c <main>
  bx lr
 800046e:	4770      	bx	lr
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000478:	080020e8 	.word	0x080020e8
  ldr r2, =_sbss
 800047c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000480:	200001f4 	.word	0x200001f4

08000484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_2_IRQHandler>
	...

08000488 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <DWT_Delay_Init+0x58>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <DWT_Delay_Init+0x58>)
 8000492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000496:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <DWT_Delay_Init+0x58>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <DWT_Delay_Init+0x58>)
 800049e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004a2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <DWT_Delay_Init+0x5c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <DWT_Delay_Init+0x5c>)
 80004aa:	f023 0301 	bic.w	r3, r3, #1
 80004ae:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <DWT_Delay_Init+0x5c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <DWT_Delay_Init+0x5c>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <DWT_Delay_Init+0x5c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80004c2:	bf00      	nop
     __ASM volatile ("NOP");
 80004c4:	bf00      	nop
  __ASM volatile ("NOP");
 80004c6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <DWT_Delay_Init+0x5c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80004d0:	2300      	movs	r3, #0
 80004d2:	e000      	b.n	80004d6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80004d4:	2301      	movs	r3, #1
  }
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e000edf0 	.word	0xe000edf0
 80004e4:	e0001000 	.word	0xe0001000

080004e8 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <DWT_Delay_us+0x40>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80004f6:	f001 f8cf 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <DWT_Delay_us+0x44>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9b      	lsrs	r3, r3, #18
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 800050c:	bf00      	nop
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <DWT_Delay_us+0x40>)
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	1ad2      	subs	r2, r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3f8      	bcc.n	800050e <DWT_Delay_us+0x26>
		;
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	e0001000 	.word	0xe0001000
 800052c:	431bde83 	.word	0x431bde83

08000530 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ffd3 	bl	80004e8 <DWT_Delay_us>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	460b      	mov	r3, r1
 8000554:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7a1b      	ldrb	r3, [r3, #8]
 8000560:	4619      	mov	r1, r3
 8000562:	230f      	movs	r3, #15
 8000564:	408b      	lsls	r3, r1
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	400a      	ands	r2, r1
 8000570:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	7a09      	ldrb	r1, [r1, #8]
 800057e:	408b      	lsls	r3, r1
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6958      	ldr	r0, [r3, #20]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	8b1b      	ldrh	r3, [r3, #24]
 80005a8:	78fa      	ldrb	r2, [r7, #3]
 80005aa:	4619      	mov	r1, r3
 80005ac:	f000 fc9c 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68d8      	ldr	r0, [r3, #12]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	8a1b      	ldrh	r3, [r3, #16]
 80005cc:	78fa      	ldrb	r2, [r7, #3]
 80005ce:	4619      	mov	r1, r3
 80005d0:	f000 fc8a 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	2301      	movs	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f107 0208 	add.w	r2, r7, #8
 8000608:	4611      	mov	r1, r2
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fae8 	bl	8000be0 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	8a1b      	ldrh	r3, [r3, #16]
 8000614:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	4611      	mov	r1, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fadd 	bl	8000be0 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7a1b      	ldrb	r3, [r3, #8]
 800062a:	461a      	mov	r2, r3
 800062c:	230f      	movs	r3, #15
 800062e:	4093      	lsls	r3, r2
 8000630:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f107 0208 	add.w	r2, r7, #8
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f000 facf 	bl	8000be0 <HAL_GPIO_Init>
}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	70fb      	strb	r3, [r7, #3]
 8000656:	4613      	mov	r3, r2
 8000658:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	4619      	mov	r1, r3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff98 	bl	8000594 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000664:	78bb      	ldrb	r3, [r7, #2]
 8000666:	091b      	lsrs	r3, r3, #4
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4619      	mov	r1, r3
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff6c 	bl	800054a <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000672:	2101      	movs	r1, #1
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff9f 	bl	80005b8 <EN_SET>
 800067a:	200a      	movs	r0, #10
 800067c:	f7ff ff58 	bl	8000530 <usDelay>
 8000680:	2100      	movs	r1, #0
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff98 	bl	80005b8 <EN_SET>
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f7ff ff51 	bl	8000530 <usDelay>
	;
	Write_HalfByte(lcd, value);
 800068e:	78bb      	ldrb	r3, [r7, #2]
 8000690:	4619      	mov	r1, r3
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff59 	bl	800054a <Write_HalfByte>
	PulseEn
 8000698:	2101      	movs	r1, #1
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff8c 	bl	80005b8 <EN_SET>
 80006a0:	200a      	movs	r0, #10
 80006a2:	f7ff ff45 	bl	8000530 <usDelay>
 80006a6:	2100      	movs	r1, #0
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff85 	bl	80005b8 <EN_SET>
 80006ae:	2064      	movs	r0, #100	; 0x64
 80006b0:	f7ff ff3e 	bl	8000530 <usDelay>
	;
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
 80006c8:	4613      	mov	r3, r2
 80006ca:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 80006cc:	f7ff fedc 	bl	8000488 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff83 	bl	80005dc <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2240      	movs	r2, #64	; 0x40
 80006e0:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	78ba      	ldrb	r2, [r7, #2]
 80006e6:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 80006e8:	78bb      	ldrb	r3, [r7, #2]
 80006ea:	3340      	adds	r3, #64	; 0x40
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 80006f2:	2100      	movs	r1, #0
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff4d 	bl	8000594 <RS_SET>
	EN_SET(lcd, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff5b 	bl	80005b8 <EN_SET>
	usDelay(50000);
 8000702:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000706:	f7ff ff13 	bl	8000530 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 800070a:	2300      	movs	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e018      	b.n	8000742 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8000710:	2103      	movs	r1, #3
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff19 	bl	800054a <Write_HalfByte>
		PulseEn
 8000718:	2101      	movs	r1, #1
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff4c 	bl	80005b8 <EN_SET>
 8000720:	200a      	movs	r0, #10
 8000722:	f7ff ff05 	bl	8000530 <usDelay>
 8000726:	2100      	movs	r1, #0
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff45 	bl	80005b8 <EN_SET>
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f7ff fefe 	bl	8000530 <usDelay>
		;
		usDelay(4500);
 8000734:	f241 1094 	movw	r0, #4500	; 0x1194
 8000738:	f7ff fefa 	bl	8000530 <usDelay>
	for (x = 0; x < 2; x++)
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3301      	adds	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d9e3      	bls.n	8000710 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000748:	2103      	movs	r1, #3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff fefd 	bl	800054a <Write_HalfByte>
	PulseEn
 8000750:	2101      	movs	r1, #1
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ff30 	bl	80005b8 <EN_SET>
 8000758:	200a      	movs	r0, #10
 800075a:	f7ff fee9 	bl	8000530 <usDelay>
 800075e:	2100      	movs	r1, #0
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff29 	bl	80005b8 <EN_SET>
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f7ff fee2 	bl	8000530 <usDelay>
	;
	usDelay(150);
 800076c:	2096      	movs	r0, #150	; 0x96
 800076e:	f7ff fedf 	bl	8000530 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000772:	2102      	movs	r1, #2
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fee8 	bl	800054a <Write_HalfByte>
	PulseEn
 800077a:	2101      	movs	r1, #1
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff1b 	bl	80005b8 <EN_SET>
 8000782:	200a      	movs	r0, #10
 8000784:	f7ff fed4 	bl	8000530 <usDelay>
 8000788:	2100      	movs	r1, #0
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff14 	bl	80005b8 <EN_SET>
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f7ff fecd 	bl	8000530 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000796:	2228      	movs	r2, #40	; 0x28
 8000798:	2100      	movs	r1, #0
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff55 	bl	800064a <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 80007a0:	2300      	movs	r3, #0
 80007a2:	2200      	movs	r2, #0
 80007a4:	2101      	movs	r1, #1
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 f86d 	bl	8000886 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f859 	bl	8000864 <Alcd_Clear>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	70fb      	strb	r3, [r7, #3]
 80007c6:	4613      	mov	r3, r2
 80007c8:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	7e9a      	ldrb	r2, [r3, #26]
 80007d2:	78bb      	ldrb	r3, [r7, #2]
 80007d4:	4413      	add	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff2f 	bl	800064a <Alcd_SendByte>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8000802:	2300      	movs	r3, #0
 8000804:	75fb      	strb	r3, [r7, #23]
 8000806:	e00b      	b.n	8000820 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60ba      	str	r2, [r7, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	2101      	movs	r1, #1
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff ff18 	bl	800064a <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	3301      	adds	r3, #1
 800081e:	75fb      	strb	r3, [r7, #23]
 8000820:	7dfa      	ldrb	r2, [r7, #23]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	429a      	cmp	r2, r3
 8000826:	d3ef      	bcc.n	8000808 <Alcd_Put_n+0x14>
	}
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	72fb      	strb	r3, [r7, #11]
 8000840:	4613      	mov	r3, r2
 8000842:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000844:	7aba      	ldrb	r2, [r7, #10]
 8000846:	7afb      	ldrb	r3, [r7, #11]
 8000848:	4619      	mov	r1, r3
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f7ff ffb5 	bl	80007ba <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000850:	7e3b      	ldrb	r3, [r7, #24]
 8000852:	461a      	mov	r2, r3
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff ffcc 	bl	80007f4 <Alcd_Put_n>
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 800086c:	2201      	movs	r2, #1
 800086e:	2100      	movs	r1, #0
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff feea 	bl	800064a <Alcd_SendByte>
	usDelay(2000);
 8000876:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800087a:	f7ff fe59 	bl	8000530 <usDelay>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	4608      	mov	r0, r1
 8000890:	4611      	mov	r1, r2
 8000892:	461a      	mov	r2, r3
 8000894:	4603      	mov	r3, r0
 8000896:	70fb      	strb	r3, [r7, #3]
 8000898:	460b      	mov	r3, r1
 800089a:	70bb      	strb	r3, [r7, #2]
 800089c:	4613      	mov	r3, r2
 800089e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7f9b      	ldrb	r3, [r3, #30]
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7f9b      	ldrb	r3, [r3, #30]
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 80008ce:	787b      	ldrb	r3, [r7, #1]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7f9b      	ldrb	r3, [r3, #30]
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7f9b      	ldrb	r3, [r3, #30]
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7f9b      	ldrb	r3, [r3, #30]
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fea3 	bl	800064a <Alcd_SendByte>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_Init+0x28>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <HAL_Init+0x28>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f92b 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000922:	200f      	movs	r0, #15
 8000924:	f000 f808 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000928:	f7ff fcf2 	bl	8000310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40022000 	.word	0x40022000

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x54>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x58>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f935 	bl	8000bc6 <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e00e      	b.n	8000984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d80a      	bhi.n	8000982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f000 f90b 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_InitTick+0x5c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000020 	.word	0x20000020
 8000990:	20000028 	.word	0x20000028
 8000994:	20000024 	.word	0x20000024

08000998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x1c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x20>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <HAL_IncTick+0x20>)
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	20000028 	.word	0x20000028
 80009b8:	200000a8 	.word	0x200000a8

080009bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <HAL_GetTick+0x10>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	200000a8 	.word	0x200000a8

080009d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d8:	f7ff fff0 	bl	80009bc <HAL_GetTick>
 80009dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e8:	d005      	beq.n	80009f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_Delay+0x44>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4413      	add	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009f6:	bf00      	nop
 80009f8:	f7ff ffe0 	bl	80009bc <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d8f7      	bhi.n	80009f8 <HAL_Delay+0x28>
  {
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000028 	.word	0x20000028

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f7ff ff90 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff49 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff5e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffb0 	bl	8000b34 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf2:	e169      	b.n	8000ec8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	f040 8158 	bne.w	8000ec2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a9a      	ldr	r2, [pc, #616]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d05e      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c1c:	4a98      	ldr	r2, [pc, #608]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d875      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c22:	4a98      	ldr	r2, [pc, #608]	; (8000e84 <HAL_GPIO_Init+0x2a4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d058      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c28:	4a96      	ldr	r2, [pc, #600]	; (8000e84 <HAL_GPIO_Init+0x2a4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d86f      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c2e:	4a96      	ldr	r2, [pc, #600]	; (8000e88 <HAL_GPIO_Init+0x2a8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d052      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c34:	4a94      	ldr	r2, [pc, #592]	; (8000e88 <HAL_GPIO_Init+0x2a8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d869      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c3a:	4a94      	ldr	r2, [pc, #592]	; (8000e8c <HAL_GPIO_Init+0x2ac>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d04c      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c40:	4a92      	ldr	r2, [pc, #584]	; (8000e8c <HAL_GPIO_Init+0x2ac>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d863      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c46:	4a92      	ldr	r2, [pc, #584]	; (8000e90 <HAL_GPIO_Init+0x2b0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d046      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c4c:	4a90      	ldr	r2, [pc, #576]	; (8000e90 <HAL_GPIO_Init+0x2b0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d85d      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d82a      	bhi.n	8000cac <HAL_GPIO_Init+0xcc>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d859      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <HAL_GPIO_Init+0x80>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000cb5 	.word	0x08000cb5
 8000c68:	08000cc7 	.word	0x08000cc7
 8000c6c:	08000d09 	.word	0x08000d09
 8000c70:	08000d0f 	.word	0x08000d0f
 8000c74:	08000d0f 	.word	0x08000d0f
 8000c78:	08000d0f 	.word	0x08000d0f
 8000c7c:	08000d0f 	.word	0x08000d0f
 8000c80:	08000d0f 	.word	0x08000d0f
 8000c84:	08000d0f 	.word	0x08000d0f
 8000c88:	08000d0f 	.word	0x08000d0f
 8000c8c:	08000d0f 	.word	0x08000d0f
 8000c90:	08000d0f 	.word	0x08000d0f
 8000c94:	08000d0f 	.word	0x08000d0f
 8000c98:	08000d0f 	.word	0x08000d0f
 8000c9c:	08000d0f 	.word	0x08000d0f
 8000ca0:	08000d0f 	.word	0x08000d0f
 8000ca4:	08000cbd 	.word	0x08000cbd
 8000ca8:	08000cd1 	.word	0x08000cd1
 8000cac:	4a79      	ldr	r2, [pc, #484]	; (8000e94 <HAL_GPIO_Init+0x2b4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cb2:	e02c      	b.n	8000d0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e029      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e024      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	3308      	adds	r3, #8
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e01f      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	330c      	adds	r3, #12
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e01a      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d102      	bne.n	8000ce8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	623b      	str	r3, [r7, #32]
          break;
 8000ce6:	e013      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d105      	bne.n	8000cfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	611a      	str	r2, [r3, #16]
          break;
 8000cfa:	e009      	b.n	8000d10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	615a      	str	r2, [r3, #20]
          break;
 8000d06:	e003      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
          break;
 8000d0c:	e000      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          break;
 8000d0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2bff      	cmp	r3, #255	; 0xff
 8000d14:	d801      	bhi.n	8000d1a <HAL_GPIO_Init+0x13a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	e001      	b.n	8000d1e <HAL_GPIO_Init+0x13e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	; 0xff
 8000d24:	d802      	bhi.n	8000d2c <HAL_GPIO_Init+0x14c>
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0x152>
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	3b08      	subs	r3, #8
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	210f      	movs	r1, #15
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	401a      	ands	r2, r3
 8000d44:	6a39      	ldr	r1, [r7, #32]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 80b1 	beq.w	8000ec2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d60:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d78:	4a48      	ldr	r2, [pc, #288]	; (8000e9c <HAL_GPIO_Init+0x2bc>)
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a40      	ldr	r2, [pc, #256]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d013      	beq.n	8000dcc <HAL_GPIO_Init+0x1ec>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <HAL_GPIO_Init+0x2c4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d00d      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e8>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a3e      	ldr	r2, [pc, #248]	; (8000ea8 <HAL_GPIO_Init+0x2c8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d007      	beq.n	8000dc4 <HAL_GPIO_Init+0x1e4>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <HAL_GPIO_Init+0x2cc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_GPIO_Init+0x1e0>
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	e004      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd0:	f002 0203 	and.w	r2, r2, #3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dde:	492f      	ldr	r1, [pc, #188]	; (8000e9c <HAL_GPIO_Init+0x2bc>)
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	492c      	ldr	r1, [pc, #176]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4928      	ldr	r1, [pc, #160]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	4922      	ldr	r1, [pc, #136]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	491e      	ldr	r1, [pc, #120]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4918      	ldr	r1, [pc, #96]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d021      	beq.n	8000eb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]
 8000e7c:	e021      	b.n	8000ec2 <HAL_GPIO_Init+0x2e2>
 8000e7e:	bf00      	nop
 8000e80:	10320000 	.word	0x10320000
 8000e84:	10310000 	.word	0x10310000
 8000e88:	10220000 	.word	0x10220000
 8000e8c:	10210000 	.word	0x10210000
 8000e90:	10120000 	.word	0x10120000
 8000e94:	10110000 	.word	0x10110000
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40011000 	.word	0x40011000
 8000eac:	40011400 	.word	0x40011400
 8000eb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4909      	ldr	r1, [pc, #36]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f47f ae8e 	bne.w	8000bf4 <HAL_GPIO_Init+0x14>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	372c      	adds	r7, #44	; 0x2c
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	611a      	str	r2, [r3, #16]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e272      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8087 	beq.w	8001046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f38:	4b92      	ldr	r3, [pc, #584]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d00c      	beq.n	8000f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f44:	4b8f      	ldr	r3, [pc, #572]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d112      	bne.n	8000f76 <HAL_RCC_OscConfig+0x5e>
 8000f50:	4b8c      	ldr	r3, [pc, #560]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d10b      	bne.n	8000f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	4b89      	ldr	r3, [pc, #548]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d06c      	beq.n	8001044 <HAL_RCC_OscConfig+0x12c>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d168      	bne.n	8001044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e24c      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7e:	d106      	bne.n	8000f8e <HAL_RCC_OscConfig+0x76>
 8000f80:	4b80      	ldr	r3, [pc, #512]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a7f      	ldr	r2, [pc, #508]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e02e      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x98>
 8000f96:	4b7b      	ldr	r3, [pc, #492]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a7a      	ldr	r2, [pc, #488]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b78      	ldr	r3, [pc, #480]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a77      	ldr	r2, [pc, #476]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0xbc>
 8000fba:	4b72      	ldr	r3, [pc, #456]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a71      	ldr	r2, [pc, #452]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a6e      	ldr	r2, [pc, #440]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000fd4:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a6a      	ldr	r2, [pc, #424]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a67      	ldr	r2, [pc, #412]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fce2 	bl	80009bc <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fcde 	bl	80009bc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e200      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0xe4>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fcce 	bl	80009bc <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fcca 	bl	80009bc <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1ec      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b53      	ldr	r3, [pc, #332]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x10c>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d063      	beq.n	800111a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800105e:	4b49      	ldr	r3, [pc, #292]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b08      	cmp	r3, #8
 8001068:	d11c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x18c>
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d116      	bne.n	80010a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	4b43      	ldr	r3, [pc, #268]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x176>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e1c0      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4939      	ldr	r1, [pc, #228]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e03a      	b.n	800111a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_RCC_OscConfig+0x270>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b2:	f7ff fc83 	bl	80009bc <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fc7f 	bl	80009bc <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e1a1      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4927      	ldr	r1, [pc, #156]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_RCC_OscConfig+0x270>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc62 	bl	80009bc <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fc5e 	bl	80009bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e180      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d03a      	beq.n	800119c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d019      	beq.n	8001162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_RCC_OscConfig+0x274>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fc42 	bl	80009bc <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fc3e 	bl	80009bc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e160      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 faa6 	bl	80016ac <RCC_Delay>
 8001160:	e01c      	b.n	800119c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_RCC_OscConfig+0x274>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001168:	f7ff fc28 	bl	80009bc <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116e:	e00f      	b.n	8001190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fc24 	bl	80009bc <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d908      	bls.n	8001190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e146      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	42420000 	.word	0x42420000
 800118c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001190:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1e9      	bne.n	8001170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80a6 	beq.w	80012f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ae:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10d      	bne.n	80011d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b88      	ldr	r3, [pc, #544]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a87      	ldr	r2, [pc, #540]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b85      	ldr	r3, [pc, #532]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <HAL_RCC_OscConfig+0x4c8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e2:	4b7f      	ldr	r3, [pc, #508]	; (80013e0 <HAL_RCC_OscConfig+0x4c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7e      	ldr	r2, [pc, #504]	; (80013e0 <HAL_RCC_OscConfig+0x4c8>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fbe5 	bl	80009bc <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f6:	f7ff fbe1 	bl	80009bc <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b64      	cmp	r3, #100	; 0x64
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e103      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	4b75      	ldr	r3, [pc, #468]	; (80013e0 <HAL_RCC_OscConfig+0x4c8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x312>
 800121c:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6213      	str	r3, [r2, #32]
 8001228:	e02d      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x334>
 8001232:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4a69      	ldr	r2, [pc, #420]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	6213      	str	r3, [r2, #32]
 800123e:	4b67      	ldr	r3, [pc, #412]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a66      	ldr	r2, [pc, #408]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001244:	f023 0304 	bic.w	r3, r3, #4
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	e01c      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b05      	cmp	r3, #5
 8001252:	d10c      	bne.n	800126e <HAL_RCC_OscConfig+0x356>
 8001254:	4b61      	ldr	r3, [pc, #388]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4a60      	ldr	r2, [pc, #384]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6213      	str	r3, [r2, #32]
 8001260:	4b5e      	ldr	r3, [pc, #376]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4a5d      	ldr	r2, [pc, #372]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6213      	str	r3, [r2, #32]
 800126c:	e00b      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800126e:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a5a      	ldr	r2, [pc, #360]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a57      	ldr	r2, [pc, #348]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001280:	f023 0304 	bic.w	r3, r3, #4
 8001284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d015      	beq.n	80012ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fb95 	bl	80009bc <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fb91 	bl	80009bc <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0b1      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0ee      	beq.n	8001296 <HAL_RCC_OscConfig+0x37e>
 80012b8:	e014      	b.n	80012e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fb7f 	bl	80009bc <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c2:	f7ff fb7b 	bl	80009bc <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e09b      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	4b40      	ldr	r3, [pc, #256]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ee      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d105      	bne.n	80012f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d061      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d146      	bne.n	80013a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <HAL_RCC_OscConfig+0x4cc>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fb4f 	bl	80009bc <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001322:	f7ff fb4b 	bl	80009bc <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e06d      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d108      	bne.n	800135c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	4921      	ldr	r1, [pc, #132]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a19      	ldr	r1, [r3, #32]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	430b      	orrs	r3, r1
 800136e:	491b      	ldr	r1, [pc, #108]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x4cc>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fb1f 	bl	80009bc <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fb1b 	bl	80009bc <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e03d      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x46a>
 80013a0:	e035      	b.n	800140e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_RCC_OscConfig+0x4cc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb08 	bl	80009bc <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fb04 	bl	80009bc <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e026      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x498>
 80013ce:	e01e      	b.n	800140e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e019      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40007000 	.word	0x40007000
 80013e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x500>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0d0      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d910      	bls.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b67      	ldr	r3, [pc, #412]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0207 	bic.w	r2, r3, #7
 8001446:	4965      	ldr	r1, [pc, #404]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b8      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001482:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800149a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d040      	beq.n	800153c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e073      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06b      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4936      	ldr	r1, [pc, #216]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff fa56 	bl	80009bc <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff fa52 	bl	80009bc <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e053      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d210      	bcs.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 0207 	bic.w	r2, r3, #7
 8001552:	4922      	ldr	r1, [pc, #136]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e032      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f821 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	490a      	ldr	r1, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x1c8>)
 80015bc:	5ccb      	ldrb	r3, [r1, r3]
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1cc>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1d0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f9b4 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	08002088 	.word	0x08002088
 80015e8:	20000020 	.word	0x20000020
 80015ec:	20000024 	.word	0x20000024

080015f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_GetSysClockFreq+0x94>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d002      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x30>
 800161a:	2b08      	cmp	r3, #8
 800161c:	d003      	beq.n	8001626 <HAL_RCC_GetSysClockFreq+0x36>
 800161e:	e027      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_RCC_GetSysClockFreq+0x98>)
 8001622:	613b      	str	r3, [r7, #16]
      break;
 8001624:	e027      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	0c9b      	lsrs	r3, r3, #18
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d010      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_RCC_GetSysClockFreq+0x94>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0c5b      	lsrs	r3, r3, #17
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <HAL_RCC_GetSysClockFreq+0xa0>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_RCC_GetSysClockFreq+0x98>)
 8001652:	fb03 f202 	mul.w	r2, r3, r2
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e004      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	613b      	str	r3, [r7, #16]
      break;
 800166e:	e002      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetSysClockFreq+0x98>)
 8001672:	613b      	str	r3, [r7, #16]
      break;
 8001674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001676:	693b      	ldr	r3, [r7, #16]
}
 8001678:	4618      	mov	r0, r3
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	007a1200 	.word	0x007a1200
 800168c:	08002098 	.word	0x08002098
 8001690:	080020a8 	.word	0x080020a8
 8001694:	003d0900 	.word	0x003d0900

08001698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800169c:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000020 	.word	0x20000020

080016ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <RCC_Delay+0x34>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <RCC_Delay+0x38>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0a5b      	lsrs	r3, r3, #9
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016c8:	bf00      	nop
  }
  while (Delay --);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	60fa      	str	r2, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f9      	bne.n	80016c8 <RCC_Delay+0x1c>
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000020 	.word	0x20000020
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <siprintf>:
 80016e8:	b40e      	push	{r1, r2, r3}
 80016ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016ee:	b500      	push	{lr}
 80016f0:	b09c      	sub	sp, #112	; 0x70
 80016f2:	ab1d      	add	r3, sp, #116	; 0x74
 80016f4:	9002      	str	r0, [sp, #8]
 80016f6:	9006      	str	r0, [sp, #24]
 80016f8:	9107      	str	r1, [sp, #28]
 80016fa:	9104      	str	r1, [sp, #16]
 80016fc:	4808      	ldr	r0, [pc, #32]	; (8001720 <siprintf+0x38>)
 80016fe:	4909      	ldr	r1, [pc, #36]	; (8001724 <siprintf+0x3c>)
 8001700:	f853 2b04 	ldr.w	r2, [r3], #4
 8001704:	9105      	str	r1, [sp, #20]
 8001706:	6800      	ldr	r0, [r0, #0]
 8001708:	a902      	add	r1, sp, #8
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f000 f98e 	bl	8001a2c <_svfiprintf_r>
 8001710:	2200      	movs	r2, #0
 8001712:	9b02      	ldr	r3, [sp, #8]
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	b01c      	add	sp, #112	; 0x70
 8001718:	f85d eb04 	ldr.w	lr, [sp], #4
 800171c:	b003      	add	sp, #12
 800171e:	4770      	bx	lr
 8001720:	20000078 	.word	0x20000078
 8001724:	ffff0208 	.word	0xffff0208

08001728 <memset>:
 8001728:	4603      	mov	r3, r0
 800172a:	4402      	add	r2, r0
 800172c:	4293      	cmp	r3, r2
 800172e:	d100      	bne.n	8001732 <memset+0xa>
 8001730:	4770      	bx	lr
 8001732:	f803 1b01 	strb.w	r1, [r3], #1
 8001736:	e7f9      	b.n	800172c <memset+0x4>

08001738 <__errno>:
 8001738:	4b01      	ldr	r3, [pc, #4]	; (8001740 <__errno+0x8>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000078 	.word	0x20000078

08001744 <__libc_init_array>:
 8001744:	b570      	push	{r4, r5, r6, lr}
 8001746:	2600      	movs	r6, #0
 8001748:	4d0c      	ldr	r5, [pc, #48]	; (800177c <__libc_init_array+0x38>)
 800174a:	4c0d      	ldr	r4, [pc, #52]	; (8001780 <__libc_init_array+0x3c>)
 800174c:	1b64      	subs	r4, r4, r5
 800174e:	10a4      	asrs	r4, r4, #2
 8001750:	42a6      	cmp	r6, r4
 8001752:	d109      	bne.n	8001768 <__libc_init_array+0x24>
 8001754:	f000 fc7a 	bl	800204c <_init>
 8001758:	2600      	movs	r6, #0
 800175a:	4d0a      	ldr	r5, [pc, #40]	; (8001784 <__libc_init_array+0x40>)
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <__libc_init_array+0x44>)
 800175e:	1b64      	subs	r4, r4, r5
 8001760:	10a4      	asrs	r4, r4, #2
 8001762:	42a6      	cmp	r6, r4
 8001764:	d105      	bne.n	8001772 <__libc_init_array+0x2e>
 8001766:	bd70      	pop	{r4, r5, r6, pc}
 8001768:	f855 3b04 	ldr.w	r3, [r5], #4
 800176c:	4798      	blx	r3
 800176e:	3601      	adds	r6, #1
 8001770:	e7ee      	b.n	8001750 <__libc_init_array+0xc>
 8001772:	f855 3b04 	ldr.w	r3, [r5], #4
 8001776:	4798      	blx	r3
 8001778:	3601      	adds	r6, #1
 800177a:	e7f2      	b.n	8001762 <__libc_init_array+0x1e>
 800177c:	080020e0 	.word	0x080020e0
 8001780:	080020e0 	.word	0x080020e0
 8001784:	080020e0 	.word	0x080020e0
 8001788:	080020e4 	.word	0x080020e4

0800178c <__retarget_lock_acquire_recursive>:
 800178c:	4770      	bx	lr

0800178e <__retarget_lock_release_recursive>:
 800178e:	4770      	bx	lr

08001790 <_free_r>:
 8001790:	b538      	push	{r3, r4, r5, lr}
 8001792:	4605      	mov	r5, r0
 8001794:	2900      	cmp	r1, #0
 8001796:	d040      	beq.n	800181a <_free_r+0x8a>
 8001798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800179c:	1f0c      	subs	r4, r1, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bfb8      	it	lt
 80017a2:	18e4      	addlt	r4, r4, r3
 80017a4:	f000 f8dc 	bl	8001960 <__malloc_lock>
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <_free_r+0x8c>)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	b933      	cbnz	r3, 80017bc <_free_r+0x2c>
 80017ae:	6063      	str	r3, [r4, #4]
 80017b0:	6014      	str	r4, [r2, #0]
 80017b2:	4628      	mov	r0, r5
 80017b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017b8:	f000 b8d8 	b.w	800196c <__malloc_unlock>
 80017bc:	42a3      	cmp	r3, r4
 80017be:	d908      	bls.n	80017d2 <_free_r+0x42>
 80017c0:	6820      	ldr	r0, [r4, #0]
 80017c2:	1821      	adds	r1, r4, r0
 80017c4:	428b      	cmp	r3, r1
 80017c6:	bf01      	itttt	eq
 80017c8:	6819      	ldreq	r1, [r3, #0]
 80017ca:	685b      	ldreq	r3, [r3, #4]
 80017cc:	1809      	addeq	r1, r1, r0
 80017ce:	6021      	streq	r1, [r4, #0]
 80017d0:	e7ed      	b.n	80017ae <_free_r+0x1e>
 80017d2:	461a      	mov	r2, r3
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	b10b      	cbz	r3, 80017dc <_free_r+0x4c>
 80017d8:	42a3      	cmp	r3, r4
 80017da:	d9fa      	bls.n	80017d2 <_free_r+0x42>
 80017dc:	6811      	ldr	r1, [r2, #0]
 80017de:	1850      	adds	r0, r2, r1
 80017e0:	42a0      	cmp	r0, r4
 80017e2:	d10b      	bne.n	80017fc <_free_r+0x6c>
 80017e4:	6820      	ldr	r0, [r4, #0]
 80017e6:	4401      	add	r1, r0
 80017e8:	1850      	adds	r0, r2, r1
 80017ea:	4283      	cmp	r3, r0
 80017ec:	6011      	str	r1, [r2, #0]
 80017ee:	d1e0      	bne.n	80017b2 <_free_r+0x22>
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4408      	add	r0, r1
 80017f6:	6010      	str	r0, [r2, #0]
 80017f8:	6053      	str	r3, [r2, #4]
 80017fa:	e7da      	b.n	80017b2 <_free_r+0x22>
 80017fc:	d902      	bls.n	8001804 <_free_r+0x74>
 80017fe:	230c      	movs	r3, #12
 8001800:	602b      	str	r3, [r5, #0]
 8001802:	e7d6      	b.n	80017b2 <_free_r+0x22>
 8001804:	6820      	ldr	r0, [r4, #0]
 8001806:	1821      	adds	r1, r4, r0
 8001808:	428b      	cmp	r3, r1
 800180a:	bf01      	itttt	eq
 800180c:	6819      	ldreq	r1, [r3, #0]
 800180e:	685b      	ldreq	r3, [r3, #4]
 8001810:	1809      	addeq	r1, r1, r0
 8001812:	6021      	streq	r1, [r4, #0]
 8001814:	6063      	str	r3, [r4, #4]
 8001816:	6054      	str	r4, [r2, #4]
 8001818:	e7cb      	b.n	80017b2 <_free_r+0x22>
 800181a:	bd38      	pop	{r3, r4, r5, pc}
 800181c:	200001ec 	.word	0x200001ec

08001820 <sbrk_aligned>:
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	4e0e      	ldr	r6, [pc, #56]	; (800185c <sbrk_aligned+0x3c>)
 8001824:	460c      	mov	r4, r1
 8001826:	6831      	ldr	r1, [r6, #0]
 8001828:	4605      	mov	r5, r0
 800182a:	b911      	cbnz	r1, 8001832 <sbrk_aligned+0x12>
 800182c:	f000 fbaa 	bl	8001f84 <_sbrk_r>
 8001830:	6030      	str	r0, [r6, #0]
 8001832:	4621      	mov	r1, r4
 8001834:	4628      	mov	r0, r5
 8001836:	f000 fba5 	bl	8001f84 <_sbrk_r>
 800183a:	1c43      	adds	r3, r0, #1
 800183c:	d00a      	beq.n	8001854 <sbrk_aligned+0x34>
 800183e:	1cc4      	adds	r4, r0, #3
 8001840:	f024 0403 	bic.w	r4, r4, #3
 8001844:	42a0      	cmp	r0, r4
 8001846:	d007      	beq.n	8001858 <sbrk_aligned+0x38>
 8001848:	1a21      	subs	r1, r4, r0
 800184a:	4628      	mov	r0, r5
 800184c:	f000 fb9a 	bl	8001f84 <_sbrk_r>
 8001850:	3001      	adds	r0, #1
 8001852:	d101      	bne.n	8001858 <sbrk_aligned+0x38>
 8001854:	f04f 34ff 	mov.w	r4, #4294967295
 8001858:	4620      	mov	r0, r4
 800185a:	bd70      	pop	{r4, r5, r6, pc}
 800185c:	200001f0 	.word	0x200001f0

08001860 <_malloc_r>:
 8001860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001864:	1ccd      	adds	r5, r1, #3
 8001866:	f025 0503 	bic.w	r5, r5, #3
 800186a:	3508      	adds	r5, #8
 800186c:	2d0c      	cmp	r5, #12
 800186e:	bf38      	it	cc
 8001870:	250c      	movcc	r5, #12
 8001872:	2d00      	cmp	r5, #0
 8001874:	4607      	mov	r7, r0
 8001876:	db01      	blt.n	800187c <_malloc_r+0x1c>
 8001878:	42a9      	cmp	r1, r5
 800187a:	d905      	bls.n	8001888 <_malloc_r+0x28>
 800187c:	230c      	movs	r3, #12
 800187e:	2600      	movs	r6, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4630      	mov	r0, r6
 8001884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001888:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800195c <_malloc_r+0xfc>
 800188c:	f000 f868 	bl	8001960 <__malloc_lock>
 8001890:	f8d8 3000 	ldr.w	r3, [r8]
 8001894:	461c      	mov	r4, r3
 8001896:	bb5c      	cbnz	r4, 80018f0 <_malloc_r+0x90>
 8001898:	4629      	mov	r1, r5
 800189a:	4638      	mov	r0, r7
 800189c:	f7ff ffc0 	bl	8001820 <sbrk_aligned>
 80018a0:	1c43      	adds	r3, r0, #1
 80018a2:	4604      	mov	r4, r0
 80018a4:	d155      	bne.n	8001952 <_malloc_r+0xf2>
 80018a6:	f8d8 4000 	ldr.w	r4, [r8]
 80018aa:	4626      	mov	r6, r4
 80018ac:	2e00      	cmp	r6, #0
 80018ae:	d145      	bne.n	800193c <_malloc_r+0xdc>
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d048      	beq.n	8001946 <_malloc_r+0xe6>
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	4631      	mov	r1, r6
 80018b8:	4638      	mov	r0, r7
 80018ba:	eb04 0903 	add.w	r9, r4, r3
 80018be:	f000 fb61 	bl	8001f84 <_sbrk_r>
 80018c2:	4581      	cmp	r9, r0
 80018c4:	d13f      	bne.n	8001946 <_malloc_r+0xe6>
 80018c6:	6821      	ldr	r1, [r4, #0]
 80018c8:	4638      	mov	r0, r7
 80018ca:	1a6d      	subs	r5, r5, r1
 80018cc:	4629      	mov	r1, r5
 80018ce:	f7ff ffa7 	bl	8001820 <sbrk_aligned>
 80018d2:	3001      	adds	r0, #1
 80018d4:	d037      	beq.n	8001946 <_malloc_r+0xe6>
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	442b      	add	r3, r5
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	f8d8 3000 	ldr.w	r3, [r8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d038      	beq.n	8001956 <_malloc_r+0xf6>
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	42a2      	cmp	r2, r4
 80018e8:	d12b      	bne.n	8001942 <_malloc_r+0xe2>
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e00f      	b.n	8001910 <_malloc_r+0xb0>
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	1b52      	subs	r2, r2, r5
 80018f4:	d41f      	bmi.n	8001936 <_malloc_r+0xd6>
 80018f6:	2a0b      	cmp	r2, #11
 80018f8:	d917      	bls.n	800192a <_malloc_r+0xca>
 80018fa:	1961      	adds	r1, r4, r5
 80018fc:	42a3      	cmp	r3, r4
 80018fe:	6025      	str	r5, [r4, #0]
 8001900:	bf18      	it	ne
 8001902:	6059      	strne	r1, [r3, #4]
 8001904:	6863      	ldr	r3, [r4, #4]
 8001906:	bf08      	it	eq
 8001908:	f8c8 1000 	streq.w	r1, [r8]
 800190c:	5162      	str	r2, [r4, r5]
 800190e:	604b      	str	r3, [r1, #4]
 8001910:	4638      	mov	r0, r7
 8001912:	f104 060b 	add.w	r6, r4, #11
 8001916:	f000 f829 	bl	800196c <__malloc_unlock>
 800191a:	f026 0607 	bic.w	r6, r6, #7
 800191e:	1d23      	adds	r3, r4, #4
 8001920:	1af2      	subs	r2, r6, r3
 8001922:	d0ae      	beq.n	8001882 <_malloc_r+0x22>
 8001924:	1b9b      	subs	r3, r3, r6
 8001926:	50a3      	str	r3, [r4, r2]
 8001928:	e7ab      	b.n	8001882 <_malloc_r+0x22>
 800192a:	42a3      	cmp	r3, r4
 800192c:	6862      	ldr	r2, [r4, #4]
 800192e:	d1dd      	bne.n	80018ec <_malloc_r+0x8c>
 8001930:	f8c8 2000 	str.w	r2, [r8]
 8001934:	e7ec      	b.n	8001910 <_malloc_r+0xb0>
 8001936:	4623      	mov	r3, r4
 8001938:	6864      	ldr	r4, [r4, #4]
 800193a:	e7ac      	b.n	8001896 <_malloc_r+0x36>
 800193c:	4634      	mov	r4, r6
 800193e:	6876      	ldr	r6, [r6, #4]
 8001940:	e7b4      	b.n	80018ac <_malloc_r+0x4c>
 8001942:	4613      	mov	r3, r2
 8001944:	e7cc      	b.n	80018e0 <_malloc_r+0x80>
 8001946:	230c      	movs	r3, #12
 8001948:	4638      	mov	r0, r7
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	f000 f80e 	bl	800196c <__malloc_unlock>
 8001950:	e797      	b.n	8001882 <_malloc_r+0x22>
 8001952:	6025      	str	r5, [r4, #0]
 8001954:	e7dc      	b.n	8001910 <_malloc_r+0xb0>
 8001956:	605b      	str	r3, [r3, #4]
 8001958:	deff      	udf	#255	; 0xff
 800195a:	bf00      	nop
 800195c:	200001ec 	.word	0x200001ec

08001960 <__malloc_lock>:
 8001960:	4801      	ldr	r0, [pc, #4]	; (8001968 <__malloc_lock+0x8>)
 8001962:	f7ff bf13 	b.w	800178c <__retarget_lock_acquire_recursive>
 8001966:	bf00      	nop
 8001968:	200001e8 	.word	0x200001e8

0800196c <__malloc_unlock>:
 800196c:	4801      	ldr	r0, [pc, #4]	; (8001974 <__malloc_unlock+0x8>)
 800196e:	f7ff bf0e 	b.w	800178e <__retarget_lock_release_recursive>
 8001972:	bf00      	nop
 8001974:	200001e8 	.word	0x200001e8

08001978 <__ssputs_r>:
 8001978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800197c:	461f      	mov	r7, r3
 800197e:	688e      	ldr	r6, [r1, #8]
 8001980:	4682      	mov	sl, r0
 8001982:	42be      	cmp	r6, r7
 8001984:	460c      	mov	r4, r1
 8001986:	4690      	mov	r8, r2
 8001988:	680b      	ldr	r3, [r1, #0]
 800198a:	d82c      	bhi.n	80019e6 <__ssputs_r+0x6e>
 800198c:	898a      	ldrh	r2, [r1, #12]
 800198e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001992:	d026      	beq.n	80019e2 <__ssputs_r+0x6a>
 8001994:	6965      	ldr	r5, [r4, #20]
 8001996:	6909      	ldr	r1, [r1, #16]
 8001998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800199c:	eba3 0901 	sub.w	r9, r3, r1
 80019a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80019a4:	1c7b      	adds	r3, r7, #1
 80019a6:	444b      	add	r3, r9
 80019a8:	106d      	asrs	r5, r5, #1
 80019aa:	429d      	cmp	r5, r3
 80019ac:	bf38      	it	cc
 80019ae:	461d      	movcc	r5, r3
 80019b0:	0553      	lsls	r3, r2, #21
 80019b2:	d527      	bpl.n	8001a04 <__ssputs_r+0x8c>
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7ff ff53 	bl	8001860 <_malloc_r>
 80019ba:	4606      	mov	r6, r0
 80019bc:	b360      	cbz	r0, 8001a18 <__ssputs_r+0xa0>
 80019be:	464a      	mov	r2, r9
 80019c0:	6921      	ldr	r1, [r4, #16]
 80019c2:	f000 fafd 	bl	8001fc0 <memcpy>
 80019c6:	89a3      	ldrh	r3, [r4, #12]
 80019c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80019cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d0:	81a3      	strh	r3, [r4, #12]
 80019d2:	6126      	str	r6, [r4, #16]
 80019d4:	444e      	add	r6, r9
 80019d6:	6026      	str	r6, [r4, #0]
 80019d8:	463e      	mov	r6, r7
 80019da:	6165      	str	r5, [r4, #20]
 80019dc:	eba5 0509 	sub.w	r5, r5, r9
 80019e0:	60a5      	str	r5, [r4, #8]
 80019e2:	42be      	cmp	r6, r7
 80019e4:	d900      	bls.n	80019e8 <__ssputs_r+0x70>
 80019e6:	463e      	mov	r6, r7
 80019e8:	4632      	mov	r2, r6
 80019ea:	4641      	mov	r1, r8
 80019ec:	6820      	ldr	r0, [r4, #0]
 80019ee:	f000 faaf 	bl	8001f50 <memmove>
 80019f2:	2000      	movs	r0, #0
 80019f4:	68a3      	ldr	r3, [r4, #8]
 80019f6:	1b9b      	subs	r3, r3, r6
 80019f8:	60a3      	str	r3, [r4, #8]
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	4433      	add	r3, r6
 80019fe:	6023      	str	r3, [r4, #0]
 8001a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a04:	462a      	mov	r2, r5
 8001a06:	f000 fae9 	bl	8001fdc <_realloc_r>
 8001a0a:	4606      	mov	r6, r0
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d1e0      	bne.n	80019d2 <__ssputs_r+0x5a>
 8001a10:	4650      	mov	r0, sl
 8001a12:	6921      	ldr	r1, [r4, #16]
 8001a14:	f7ff febc 	bl	8001790 <_free_r>
 8001a18:	230c      	movs	r3, #12
 8001a1a:	f8ca 3000 	str.w	r3, [sl]
 8001a1e:	89a3      	ldrh	r3, [r4, #12]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a28:	81a3      	strh	r3, [r4, #12]
 8001a2a:	e7e9      	b.n	8001a00 <__ssputs_r+0x88>

08001a2c <_svfiprintf_r>:
 8001a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a30:	4698      	mov	r8, r3
 8001a32:	898b      	ldrh	r3, [r1, #12]
 8001a34:	4607      	mov	r7, r0
 8001a36:	061b      	lsls	r3, r3, #24
 8001a38:	460d      	mov	r5, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	b09d      	sub	sp, #116	; 0x74
 8001a3e:	d50e      	bpl.n	8001a5e <_svfiprintf_r+0x32>
 8001a40:	690b      	ldr	r3, [r1, #16]
 8001a42:	b963      	cbnz	r3, 8001a5e <_svfiprintf_r+0x32>
 8001a44:	2140      	movs	r1, #64	; 0x40
 8001a46:	f7ff ff0b 	bl	8001860 <_malloc_r>
 8001a4a:	6028      	str	r0, [r5, #0]
 8001a4c:	6128      	str	r0, [r5, #16]
 8001a4e:	b920      	cbnz	r0, 8001a5a <_svfiprintf_r+0x2e>
 8001a50:	230c      	movs	r3, #12
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	e0d0      	b.n	8001bfc <_svfiprintf_r+0x1d0>
 8001a5a:	2340      	movs	r3, #64	; 0x40
 8001a5c:	616b      	str	r3, [r5, #20]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9309      	str	r3, [sp, #36]	; 0x24
 8001a62:	2320      	movs	r3, #32
 8001a64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a68:	2330      	movs	r3, #48	; 0x30
 8001a6a:	f04f 0901 	mov.w	r9, #1
 8001a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a72:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001c14 <_svfiprintf_r+0x1e8>
 8001a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	469a      	mov	sl, r3
 8001a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a82:	b10a      	cbz	r2, 8001a88 <_svfiprintf_r+0x5c>
 8001a84:	2a25      	cmp	r2, #37	; 0x25
 8001a86:	d1f9      	bne.n	8001a7c <_svfiprintf_r+0x50>
 8001a88:	ebba 0b04 	subs.w	fp, sl, r4
 8001a8c:	d00b      	beq.n	8001aa6 <_svfiprintf_r+0x7a>
 8001a8e:	465b      	mov	r3, fp
 8001a90:	4622      	mov	r2, r4
 8001a92:	4629      	mov	r1, r5
 8001a94:	4638      	mov	r0, r7
 8001a96:	f7ff ff6f 	bl	8001978 <__ssputs_r>
 8001a9a:	3001      	adds	r0, #1
 8001a9c:	f000 80a9 	beq.w	8001bf2 <_svfiprintf_r+0x1c6>
 8001aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001aa2:	445a      	add	r2, fp
 8001aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8001aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80a1 	beq.w	8001bf2 <_svfiprintf_r+0x1c6>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001aba:	f10a 0a01 	add.w	sl, sl, #1
 8001abe:	9304      	str	r3, [sp, #16]
 8001ac0:	9307      	str	r3, [sp, #28]
 8001ac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8001ac8:	4654      	mov	r4, sl
 8001aca:	2205      	movs	r2, #5
 8001acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ad0:	4850      	ldr	r0, [pc, #320]	; (8001c14 <_svfiprintf_r+0x1e8>)
 8001ad2:	f000 fa67 	bl	8001fa4 <memchr>
 8001ad6:	9a04      	ldr	r2, [sp, #16]
 8001ad8:	b9d8      	cbnz	r0, 8001b12 <_svfiprintf_r+0xe6>
 8001ada:	06d0      	lsls	r0, r2, #27
 8001adc:	bf44      	itt	mi
 8001ade:	2320      	movmi	r3, #32
 8001ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ae4:	0711      	lsls	r1, r2, #28
 8001ae6:	bf44      	itt	mi
 8001ae8:	232b      	movmi	r3, #43	; 0x2b
 8001aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001aee:	f89a 3000 	ldrb.w	r3, [sl]
 8001af2:	2b2a      	cmp	r3, #42	; 0x2a
 8001af4:	d015      	beq.n	8001b22 <_svfiprintf_r+0xf6>
 8001af6:	4654      	mov	r4, sl
 8001af8:	2000      	movs	r0, #0
 8001afa:	f04f 0c0a 	mov.w	ip, #10
 8001afe:	9a07      	ldr	r2, [sp, #28]
 8001b00:	4621      	mov	r1, r4
 8001b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b06:	3b30      	subs	r3, #48	; 0x30
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d94d      	bls.n	8001ba8 <_svfiprintf_r+0x17c>
 8001b0c:	b1b0      	cbz	r0, 8001b3c <_svfiprintf_r+0x110>
 8001b0e:	9207      	str	r2, [sp, #28]
 8001b10:	e014      	b.n	8001b3c <_svfiprintf_r+0x110>
 8001b12:	eba0 0308 	sub.w	r3, r0, r8
 8001b16:	fa09 f303 	lsl.w	r3, r9, r3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	9304      	str	r3, [sp, #16]
 8001b20:	e7d2      	b.n	8001ac8 <_svfiprintf_r+0x9c>
 8001b22:	9b03      	ldr	r3, [sp, #12]
 8001b24:	1d19      	adds	r1, r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	9103      	str	r1, [sp, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bfbb      	ittet	lt
 8001b2e:	425b      	neglt	r3, r3
 8001b30:	f042 0202 	orrlt.w	r2, r2, #2
 8001b34:	9307      	strge	r3, [sp, #28]
 8001b36:	9307      	strlt	r3, [sp, #28]
 8001b38:	bfb8      	it	lt
 8001b3a:	9204      	strlt	r2, [sp, #16]
 8001b3c:	7823      	ldrb	r3, [r4, #0]
 8001b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8001b40:	d10c      	bne.n	8001b5c <_svfiprintf_r+0x130>
 8001b42:	7863      	ldrb	r3, [r4, #1]
 8001b44:	2b2a      	cmp	r3, #42	; 0x2a
 8001b46:	d134      	bne.n	8001bb2 <_svfiprintf_r+0x186>
 8001b48:	9b03      	ldr	r3, [sp, #12]
 8001b4a:	3402      	adds	r4, #2
 8001b4c:	1d1a      	adds	r2, r3, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	9203      	str	r2, [sp, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bfb8      	it	lt
 8001b56:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b5a:	9305      	str	r3, [sp, #20]
 8001b5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001c18 <_svfiprintf_r+0x1ec>
 8001b60:	2203      	movs	r2, #3
 8001b62:	4650      	mov	r0, sl
 8001b64:	7821      	ldrb	r1, [r4, #0]
 8001b66:	f000 fa1d 	bl	8001fa4 <memchr>
 8001b6a:	b138      	cbz	r0, 8001b7c <_svfiprintf_r+0x150>
 8001b6c:	2240      	movs	r2, #64	; 0x40
 8001b6e:	9b04      	ldr	r3, [sp, #16]
 8001b70:	eba0 000a 	sub.w	r0, r0, sl
 8001b74:	4082      	lsls	r2, r0
 8001b76:	4313      	orrs	r3, r2
 8001b78:	3401      	adds	r4, #1
 8001b7a:	9304      	str	r3, [sp, #16]
 8001b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b80:	2206      	movs	r2, #6
 8001b82:	4826      	ldr	r0, [pc, #152]	; (8001c1c <_svfiprintf_r+0x1f0>)
 8001b84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b88:	f000 fa0c 	bl	8001fa4 <memchr>
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d038      	beq.n	8001c02 <_svfiprintf_r+0x1d6>
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <_svfiprintf_r+0x1f4>)
 8001b92:	bb1b      	cbnz	r3, 8001bdc <_svfiprintf_r+0x1b0>
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	3307      	adds	r3, #7
 8001b98:	f023 0307 	bic.w	r3, r3, #7
 8001b9c:	3308      	adds	r3, #8
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ba2:	4433      	add	r3, r6
 8001ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ba6:	e768      	b.n	8001a7a <_svfiprintf_r+0x4e>
 8001ba8:	460c      	mov	r4, r1
 8001baa:	2001      	movs	r0, #1
 8001bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bb0:	e7a6      	b.n	8001b00 <_svfiprintf_r+0xd4>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f04f 0c0a 	mov.w	ip, #10
 8001bb8:	4619      	mov	r1, r3
 8001bba:	3401      	adds	r4, #1
 8001bbc:	9305      	str	r3, [sp, #20]
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bc4:	3a30      	subs	r2, #48	; 0x30
 8001bc6:	2a09      	cmp	r2, #9
 8001bc8:	d903      	bls.n	8001bd2 <_svfiprintf_r+0x1a6>
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0c6      	beq.n	8001b5c <_svfiprintf_r+0x130>
 8001bce:	9105      	str	r1, [sp, #20]
 8001bd0:	e7c4      	b.n	8001b5c <_svfiprintf_r+0x130>
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bda:	e7f0      	b.n	8001bbe <_svfiprintf_r+0x192>
 8001bdc:	ab03      	add	r3, sp, #12
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	462a      	mov	r2, r5
 8001be2:	4638      	mov	r0, r7
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <_svfiprintf_r+0x1f8>)
 8001be6:	a904      	add	r1, sp, #16
 8001be8:	f3af 8000 	nop.w
 8001bec:	1c42      	adds	r2, r0, #1
 8001bee:	4606      	mov	r6, r0
 8001bf0:	d1d6      	bne.n	8001ba0 <_svfiprintf_r+0x174>
 8001bf2:	89ab      	ldrh	r3, [r5, #12]
 8001bf4:	065b      	lsls	r3, r3, #25
 8001bf6:	f53f af2d 	bmi.w	8001a54 <_svfiprintf_r+0x28>
 8001bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bfc:	b01d      	add	sp, #116	; 0x74
 8001bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c02:	ab03      	add	r3, sp, #12
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	462a      	mov	r2, r5
 8001c08:	4638      	mov	r0, r7
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <_svfiprintf_r+0x1f8>)
 8001c0c:	a904      	add	r1, sp, #16
 8001c0e:	f000 f87d 	bl	8001d0c <_printf_i>
 8001c12:	e7eb      	b.n	8001bec <_svfiprintf_r+0x1c0>
 8001c14:	080020aa 	.word	0x080020aa
 8001c18:	080020b0 	.word	0x080020b0
 8001c1c:	080020b4 	.word	0x080020b4
 8001c20:	00000000 	.word	0x00000000
 8001c24:	08001979 	.word	0x08001979

08001c28 <_printf_common>:
 8001c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c2c:	4616      	mov	r6, r2
 8001c2e:	4699      	mov	r9, r3
 8001c30:	688a      	ldr	r2, [r1, #8]
 8001c32:	690b      	ldr	r3, [r1, #16]
 8001c34:	4607      	mov	r7, r0
 8001c36:	4293      	cmp	r3, r2
 8001c38:	bfb8      	it	lt
 8001c3a:	4613      	movlt	r3, r2
 8001c3c:	6033      	str	r3, [r6, #0]
 8001c3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c42:	460c      	mov	r4, r1
 8001c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c48:	b10a      	cbz	r2, 8001c4e <_printf_common+0x26>
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	6033      	str	r3, [r6, #0]
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	0699      	lsls	r1, r3, #26
 8001c52:	bf42      	ittt	mi
 8001c54:	6833      	ldrmi	r3, [r6, #0]
 8001c56:	3302      	addmi	r3, #2
 8001c58:	6033      	strmi	r3, [r6, #0]
 8001c5a:	6825      	ldr	r5, [r4, #0]
 8001c5c:	f015 0506 	ands.w	r5, r5, #6
 8001c60:	d106      	bne.n	8001c70 <_printf_common+0x48>
 8001c62:	f104 0a19 	add.w	sl, r4, #25
 8001c66:	68e3      	ldr	r3, [r4, #12]
 8001c68:	6832      	ldr	r2, [r6, #0]
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	42ab      	cmp	r3, r5
 8001c6e:	dc2b      	bgt.n	8001cc8 <_printf_common+0xa0>
 8001c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c74:	1e13      	subs	r3, r2, #0
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	bf18      	it	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	0692      	lsls	r2, r2, #26
 8001c7e:	d430      	bmi.n	8001ce2 <_printf_common+0xba>
 8001c80:	4649      	mov	r1, r9
 8001c82:	4638      	mov	r0, r7
 8001c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c88:	47c0      	blx	r8
 8001c8a:	3001      	adds	r0, #1
 8001c8c:	d023      	beq.n	8001cd6 <_printf_common+0xae>
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	6922      	ldr	r2, [r4, #16]
 8001c92:	f003 0306 	and.w	r3, r3, #6
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf14      	ite	ne
 8001c9a:	2500      	movne	r5, #0
 8001c9c:	6833      	ldreq	r3, [r6, #0]
 8001c9e:	f04f 0600 	mov.w	r6, #0
 8001ca2:	bf08      	it	eq
 8001ca4:	68e5      	ldreq	r5, [r4, #12]
 8001ca6:	f104 041a 	add.w	r4, r4, #26
 8001caa:	bf08      	it	eq
 8001cac:	1aed      	subeq	r5, r5, r3
 8001cae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001cb2:	bf08      	it	eq
 8001cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	bfc4      	itt	gt
 8001cbc:	1a9b      	subgt	r3, r3, r2
 8001cbe:	18ed      	addgt	r5, r5, r3
 8001cc0:	42b5      	cmp	r5, r6
 8001cc2:	d11a      	bne.n	8001cfa <_printf_common+0xd2>
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	e008      	b.n	8001cda <_printf_common+0xb2>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	4652      	mov	r2, sl
 8001ccc:	4649      	mov	r1, r9
 8001cce:	4638      	mov	r0, r7
 8001cd0:	47c0      	blx	r8
 8001cd2:	3001      	adds	r0, #1
 8001cd4:	d103      	bne.n	8001cde <_printf_common+0xb6>
 8001cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cde:	3501      	adds	r5, #1
 8001ce0:	e7c1      	b.n	8001c66 <_printf_common+0x3e>
 8001ce2:	2030      	movs	r0, #48	; 0x30
 8001ce4:	18e1      	adds	r1, r4, r3
 8001ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001cf0:	4422      	add	r2, r4
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cf8:	e7c2      	b.n	8001c80 <_printf_common+0x58>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	4649      	mov	r1, r9
 8001d00:	4638      	mov	r0, r7
 8001d02:	47c0      	blx	r8
 8001d04:	3001      	adds	r0, #1
 8001d06:	d0e6      	beq.n	8001cd6 <_printf_common+0xae>
 8001d08:	3601      	adds	r6, #1
 8001d0a:	e7d9      	b.n	8001cc0 <_printf_common+0x98>

08001d0c <_printf_i>:
 8001d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d10:	7e0f      	ldrb	r7, [r1, #24]
 8001d12:	4691      	mov	r9, r2
 8001d14:	2f78      	cmp	r7, #120	; 0x78
 8001d16:	4680      	mov	r8, r0
 8001d18:	460c      	mov	r4, r1
 8001d1a:	469a      	mov	sl, r3
 8001d1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d22:	d807      	bhi.n	8001d34 <_printf_i+0x28>
 8001d24:	2f62      	cmp	r7, #98	; 0x62
 8001d26:	d80a      	bhi.n	8001d3e <_printf_i+0x32>
 8001d28:	2f00      	cmp	r7, #0
 8001d2a:	f000 80d5 	beq.w	8001ed8 <_printf_i+0x1cc>
 8001d2e:	2f58      	cmp	r7, #88	; 0x58
 8001d30:	f000 80c1 	beq.w	8001eb6 <_printf_i+0x1aa>
 8001d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d3c:	e03a      	b.n	8001db4 <_printf_i+0xa8>
 8001d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d42:	2b15      	cmp	r3, #21
 8001d44:	d8f6      	bhi.n	8001d34 <_printf_i+0x28>
 8001d46:	a101      	add	r1, pc, #4	; (adr r1, 8001d4c <_printf_i+0x40>)
 8001d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d4c:	08001da5 	.word	0x08001da5
 8001d50:	08001db9 	.word	0x08001db9
 8001d54:	08001d35 	.word	0x08001d35
 8001d58:	08001d35 	.word	0x08001d35
 8001d5c:	08001d35 	.word	0x08001d35
 8001d60:	08001d35 	.word	0x08001d35
 8001d64:	08001db9 	.word	0x08001db9
 8001d68:	08001d35 	.word	0x08001d35
 8001d6c:	08001d35 	.word	0x08001d35
 8001d70:	08001d35 	.word	0x08001d35
 8001d74:	08001d35 	.word	0x08001d35
 8001d78:	08001ebf 	.word	0x08001ebf
 8001d7c:	08001de5 	.word	0x08001de5
 8001d80:	08001e79 	.word	0x08001e79
 8001d84:	08001d35 	.word	0x08001d35
 8001d88:	08001d35 	.word	0x08001d35
 8001d8c:	08001ee1 	.word	0x08001ee1
 8001d90:	08001d35 	.word	0x08001d35
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001d35 	.word	0x08001d35
 8001d9c:	08001d35 	.word	0x08001d35
 8001da0:	08001e81 	.word	0x08001e81
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	1d1a      	adds	r2, r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	602a      	str	r2, [r5, #0]
 8001dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0a0      	b.n	8001efa <_printf_i+0x1ee>
 8001db8:	6820      	ldr	r0, [r4, #0]
 8001dba:	682b      	ldr	r3, [r5, #0]
 8001dbc:	0607      	lsls	r7, r0, #24
 8001dbe:	f103 0104 	add.w	r1, r3, #4
 8001dc2:	6029      	str	r1, [r5, #0]
 8001dc4:	d501      	bpl.n	8001dca <_printf_i+0xbe>
 8001dc6:	681e      	ldr	r6, [r3, #0]
 8001dc8:	e003      	b.n	8001dd2 <_printf_i+0xc6>
 8001dca:	0646      	lsls	r6, r0, #25
 8001dcc:	d5fb      	bpl.n	8001dc6 <_printf_i+0xba>
 8001dce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001dd2:	2e00      	cmp	r6, #0
 8001dd4:	da03      	bge.n	8001dde <_printf_i+0xd2>
 8001dd6:	232d      	movs	r3, #45	; 0x2d
 8001dd8:	4276      	negs	r6, r6
 8001dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dde:	230a      	movs	r3, #10
 8001de0:	4859      	ldr	r0, [pc, #356]	; (8001f48 <_printf_i+0x23c>)
 8001de2:	e012      	b.n	8001e0a <_printf_i+0xfe>
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	6820      	ldr	r0, [r4, #0]
 8001de8:	1d19      	adds	r1, r3, #4
 8001dea:	6029      	str	r1, [r5, #0]
 8001dec:	0605      	lsls	r5, r0, #24
 8001dee:	d501      	bpl.n	8001df4 <_printf_i+0xe8>
 8001df0:	681e      	ldr	r6, [r3, #0]
 8001df2:	e002      	b.n	8001dfa <_printf_i+0xee>
 8001df4:	0641      	lsls	r1, r0, #25
 8001df6:	d5fb      	bpl.n	8001df0 <_printf_i+0xe4>
 8001df8:	881e      	ldrh	r6, [r3, #0]
 8001dfa:	2f6f      	cmp	r7, #111	; 0x6f
 8001dfc:	bf0c      	ite	eq
 8001dfe:	2308      	moveq	r3, #8
 8001e00:	230a      	movne	r3, #10
 8001e02:	4851      	ldr	r0, [pc, #324]	; (8001f48 <_printf_i+0x23c>)
 8001e04:	2100      	movs	r1, #0
 8001e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e0a:	6865      	ldr	r5, [r4, #4]
 8001e0c:	2d00      	cmp	r5, #0
 8001e0e:	bfa8      	it	ge
 8001e10:	6821      	ldrge	r1, [r4, #0]
 8001e12:	60a5      	str	r5, [r4, #8]
 8001e14:	bfa4      	itt	ge
 8001e16:	f021 0104 	bicge.w	r1, r1, #4
 8001e1a:	6021      	strge	r1, [r4, #0]
 8001e1c:	b90e      	cbnz	r6, 8001e22 <_printf_i+0x116>
 8001e1e:	2d00      	cmp	r5, #0
 8001e20:	d04b      	beq.n	8001eba <_printf_i+0x1ae>
 8001e22:	4615      	mov	r5, r2
 8001e24:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e28:	fb03 6711 	mls	r7, r3, r1, r6
 8001e2c:	5dc7      	ldrb	r7, [r0, r7]
 8001e2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e32:	4637      	mov	r7, r6
 8001e34:	42bb      	cmp	r3, r7
 8001e36:	460e      	mov	r6, r1
 8001e38:	d9f4      	bls.n	8001e24 <_printf_i+0x118>
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d10b      	bne.n	8001e56 <_printf_i+0x14a>
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	07de      	lsls	r6, r3, #31
 8001e42:	d508      	bpl.n	8001e56 <_printf_i+0x14a>
 8001e44:	6923      	ldr	r3, [r4, #16]
 8001e46:	6861      	ldr	r1, [r4, #4]
 8001e48:	4299      	cmp	r1, r3
 8001e4a:	bfde      	ittt	le
 8001e4c:	2330      	movle	r3, #48	; 0x30
 8001e4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e56:	1b52      	subs	r2, r2, r5
 8001e58:	6122      	str	r2, [r4, #16]
 8001e5a:	464b      	mov	r3, r9
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	4640      	mov	r0, r8
 8001e60:	f8cd a000 	str.w	sl, [sp]
 8001e64:	aa03      	add	r2, sp, #12
 8001e66:	f7ff fedf 	bl	8001c28 <_printf_common>
 8001e6a:	3001      	adds	r0, #1
 8001e6c:	d14a      	bne.n	8001f04 <_printf_i+0x1f8>
 8001e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e72:	b004      	add	sp, #16
 8001e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	f043 0320 	orr.w	r3, r3, #32
 8001e7e:	6023      	str	r3, [r4, #0]
 8001e80:	2778      	movs	r7, #120	; 0x78
 8001e82:	4832      	ldr	r0, [pc, #200]	; (8001f4c <_printf_i+0x240>)
 8001e84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	6829      	ldr	r1, [r5, #0]
 8001e8c:	061f      	lsls	r7, r3, #24
 8001e8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e92:	d402      	bmi.n	8001e9a <_printf_i+0x18e>
 8001e94:	065f      	lsls	r7, r3, #25
 8001e96:	bf48      	it	mi
 8001e98:	b2b6      	uxthmi	r6, r6
 8001e9a:	07df      	lsls	r7, r3, #31
 8001e9c:	bf48      	it	mi
 8001e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8001ea2:	6029      	str	r1, [r5, #0]
 8001ea4:	bf48      	it	mi
 8001ea6:	6023      	strmi	r3, [r4, #0]
 8001ea8:	b91e      	cbnz	r6, 8001eb2 <_printf_i+0x1a6>
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	f023 0320 	bic.w	r3, r3, #32
 8001eb0:	6023      	str	r3, [r4, #0]
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	e7a6      	b.n	8001e04 <_printf_i+0xf8>
 8001eb6:	4824      	ldr	r0, [pc, #144]	; (8001f48 <_printf_i+0x23c>)
 8001eb8:	e7e4      	b.n	8001e84 <_printf_i+0x178>
 8001eba:	4615      	mov	r5, r2
 8001ebc:	e7bd      	b.n	8001e3a <_printf_i+0x12e>
 8001ebe:	682b      	ldr	r3, [r5, #0]
 8001ec0:	6826      	ldr	r6, [r4, #0]
 8001ec2:	1d18      	adds	r0, r3, #4
 8001ec4:	6961      	ldr	r1, [r4, #20]
 8001ec6:	6028      	str	r0, [r5, #0]
 8001ec8:	0635      	lsls	r5, r6, #24
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	d501      	bpl.n	8001ed2 <_printf_i+0x1c6>
 8001ece:	6019      	str	r1, [r3, #0]
 8001ed0:	e002      	b.n	8001ed8 <_printf_i+0x1cc>
 8001ed2:	0670      	lsls	r0, r6, #25
 8001ed4:	d5fb      	bpl.n	8001ece <_printf_i+0x1c2>
 8001ed6:	8019      	strh	r1, [r3, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4615      	mov	r5, r2
 8001edc:	6123      	str	r3, [r4, #16]
 8001ede:	e7bc      	b.n	8001e5a <_printf_i+0x14e>
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	1d1a      	adds	r2, r3, #4
 8001ee6:	602a      	str	r2, [r5, #0]
 8001ee8:	681d      	ldr	r5, [r3, #0]
 8001eea:	6862      	ldr	r2, [r4, #4]
 8001eec:	4628      	mov	r0, r5
 8001eee:	f000 f859 	bl	8001fa4 <memchr>
 8001ef2:	b108      	cbz	r0, 8001ef8 <_printf_i+0x1ec>
 8001ef4:	1b40      	subs	r0, r0, r5
 8001ef6:	6060      	str	r0, [r4, #4]
 8001ef8:	6863      	ldr	r3, [r4, #4]
 8001efa:	6123      	str	r3, [r4, #16]
 8001efc:	2300      	movs	r3, #0
 8001efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f02:	e7aa      	b.n	8001e5a <_printf_i+0x14e>
 8001f04:	462a      	mov	r2, r5
 8001f06:	4649      	mov	r1, r9
 8001f08:	4640      	mov	r0, r8
 8001f0a:	6923      	ldr	r3, [r4, #16]
 8001f0c:	47d0      	blx	sl
 8001f0e:	3001      	adds	r0, #1
 8001f10:	d0ad      	beq.n	8001e6e <_printf_i+0x162>
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	079b      	lsls	r3, r3, #30
 8001f16:	d413      	bmi.n	8001f40 <_printf_i+0x234>
 8001f18:	68e0      	ldr	r0, [r4, #12]
 8001f1a:	9b03      	ldr	r3, [sp, #12]
 8001f1c:	4298      	cmp	r0, r3
 8001f1e:	bfb8      	it	lt
 8001f20:	4618      	movlt	r0, r3
 8001f22:	e7a6      	b.n	8001e72 <_printf_i+0x166>
 8001f24:	2301      	movs	r3, #1
 8001f26:	4632      	mov	r2, r6
 8001f28:	4649      	mov	r1, r9
 8001f2a:	4640      	mov	r0, r8
 8001f2c:	47d0      	blx	sl
 8001f2e:	3001      	adds	r0, #1
 8001f30:	d09d      	beq.n	8001e6e <_printf_i+0x162>
 8001f32:	3501      	adds	r5, #1
 8001f34:	68e3      	ldr	r3, [r4, #12]
 8001f36:	9903      	ldr	r1, [sp, #12]
 8001f38:	1a5b      	subs	r3, r3, r1
 8001f3a:	42ab      	cmp	r3, r5
 8001f3c:	dcf2      	bgt.n	8001f24 <_printf_i+0x218>
 8001f3e:	e7eb      	b.n	8001f18 <_printf_i+0x20c>
 8001f40:	2500      	movs	r5, #0
 8001f42:	f104 0619 	add.w	r6, r4, #25
 8001f46:	e7f5      	b.n	8001f34 <_printf_i+0x228>
 8001f48:	080020bb 	.word	0x080020bb
 8001f4c:	080020cc 	.word	0x080020cc

08001f50 <memmove>:
 8001f50:	4288      	cmp	r0, r1
 8001f52:	b510      	push	{r4, lr}
 8001f54:	eb01 0402 	add.w	r4, r1, r2
 8001f58:	d902      	bls.n	8001f60 <memmove+0x10>
 8001f5a:	4284      	cmp	r4, r0
 8001f5c:	4623      	mov	r3, r4
 8001f5e:	d807      	bhi.n	8001f70 <memmove+0x20>
 8001f60:	1e43      	subs	r3, r0, #1
 8001f62:	42a1      	cmp	r1, r4
 8001f64:	d008      	beq.n	8001f78 <memmove+0x28>
 8001f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f6e:	e7f8      	b.n	8001f62 <memmove+0x12>
 8001f70:	4601      	mov	r1, r0
 8001f72:	4402      	add	r2, r0
 8001f74:	428a      	cmp	r2, r1
 8001f76:	d100      	bne.n	8001f7a <memmove+0x2a>
 8001f78:	bd10      	pop	{r4, pc}
 8001f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f82:	e7f7      	b.n	8001f74 <memmove+0x24>

08001f84 <_sbrk_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	2300      	movs	r3, #0
 8001f88:	4d05      	ldr	r5, [pc, #20]	; (8001fa0 <_sbrk_r+0x1c>)
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	602b      	str	r3, [r5, #0]
 8001f90:	f7fe fa18 	bl	80003c4 <_sbrk>
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	d102      	bne.n	8001f9e <_sbrk_r+0x1a>
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	b103      	cbz	r3, 8001f9e <_sbrk_r+0x1a>
 8001f9c:	6023      	str	r3, [r4, #0]
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	200001e4 	.word	0x200001e4

08001fa4 <memchr>:
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	b2c9      	uxtb	r1, r1
 8001faa:	4402      	add	r2, r0
 8001fac:	4293      	cmp	r3, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	d101      	bne.n	8001fb6 <memchr+0x12>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	e003      	b.n	8001fbe <memchr+0x1a>
 8001fb6:	7804      	ldrb	r4, [r0, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	428c      	cmp	r4, r1
 8001fbc:	d1f6      	bne.n	8001fac <memchr+0x8>
 8001fbe:	bd10      	pop	{r4, pc}

08001fc0 <memcpy>:
 8001fc0:	440a      	add	r2, r1
 8001fc2:	4291      	cmp	r1, r2
 8001fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001fc8:	d100      	bne.n	8001fcc <memcpy+0xc>
 8001fca:	4770      	bx	lr
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fd2:	4291      	cmp	r1, r2
 8001fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fd8:	d1f9      	bne.n	8001fce <memcpy+0xe>
 8001fda:	bd10      	pop	{r4, pc}

08001fdc <_realloc_r>:
 8001fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe0:	4680      	mov	r8, r0
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	460e      	mov	r6, r1
 8001fe6:	b921      	cbnz	r1, 8001ff2 <_realloc_r+0x16>
 8001fe8:	4611      	mov	r1, r2
 8001fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fee:	f7ff bc37 	b.w	8001860 <_malloc_r>
 8001ff2:	b92a      	cbnz	r2, 8002000 <_realloc_r+0x24>
 8001ff4:	f7ff fbcc 	bl	8001790 <_free_r>
 8001ff8:	4625      	mov	r5, r4
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002000:	f000 f81b 	bl	800203a <_malloc_usable_size_r>
 8002004:	4284      	cmp	r4, r0
 8002006:	4607      	mov	r7, r0
 8002008:	d802      	bhi.n	8002010 <_realloc_r+0x34>
 800200a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800200e:	d812      	bhi.n	8002036 <_realloc_r+0x5a>
 8002010:	4621      	mov	r1, r4
 8002012:	4640      	mov	r0, r8
 8002014:	f7ff fc24 	bl	8001860 <_malloc_r>
 8002018:	4605      	mov	r5, r0
 800201a:	2800      	cmp	r0, #0
 800201c:	d0ed      	beq.n	8001ffa <_realloc_r+0x1e>
 800201e:	42bc      	cmp	r4, r7
 8002020:	4622      	mov	r2, r4
 8002022:	4631      	mov	r1, r6
 8002024:	bf28      	it	cs
 8002026:	463a      	movcs	r2, r7
 8002028:	f7ff ffca 	bl	8001fc0 <memcpy>
 800202c:	4631      	mov	r1, r6
 800202e:	4640      	mov	r0, r8
 8002030:	f7ff fbae 	bl	8001790 <_free_r>
 8002034:	e7e1      	b.n	8001ffa <_realloc_r+0x1e>
 8002036:	4635      	mov	r5, r6
 8002038:	e7df      	b.n	8001ffa <_realloc_r+0x1e>

0800203a <_malloc_usable_size_r>:
 800203a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800203e:	1f18      	subs	r0, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	bfbc      	itt	lt
 8002044:	580b      	ldrlt	r3, [r1, r0]
 8002046:	18c0      	addlt	r0, r0, r3
 8002048:	4770      	bx	lr
	...

0800204c <_init>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	bf00      	nop
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr

08002058 <_fini>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr
